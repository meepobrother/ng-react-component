{
  "version": 3,
  "file": "ng-react-component.js",
  "sources": [
    "ng://ng-react-component/common/common.module.ts",
    "ng://ng-react-component/common/ng-component.ts",
    "ng://ng-react-component/common/ng-each-of.ts",
    "ng://ng-react-component/react.component.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { NgEachOf } from './ng-each-of';\nimport { NgComponentDirective } from './ng-component';\n@NgModule({\n    exports: [\n        NgEachOf,\n        NgComponentDirective\n    ],\n    declarations: [\n        NgEachOf,\n        NgComponentDirective\n    ]\n})\nexport class ReactCommonModule { }\n",
    "\nimport {\n    ComponentFactoryResolver, ComponentRef, Directive,\n    Injector, Input, NgModuleFactory, NgModuleRef,\n    OnChanges, OnDestroy, SimpleChanges, StaticProvider,\n    Type, ViewContainerRef, Output, OnInit, ComponentFactory\n} from '@angular/core';\n\n@Directive({ selector: '[ngComponent]' })\nexport class NgComponentDirective implements OnInit {\n    viewContainerRef: any;\n    componentRef: ComponentRef<any>;\n    moduleRef: any;\n\n    @Input() ngComponent: any;\n    @Input() ngComponentInput: any;\n    @Output() Output: any;\n\n    constructor(_viewContainerRef: ViewContainerRef) {\n        this.viewContainerRef = _viewContainerRef;\n    }\n\n    ngOnInit() {\n        // console.log(this.ngComponentInput);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.viewContainerRef.clear();\n        this.componentRef = null;\n        if (this.ngComponent) {\n            const elInjector = this.viewContainerRef.parentInjector;\n            const componentFactoryResolver: ComponentFactoryResolver = this.moduleRef ? this.moduleRef.componentFactoryResolver :\n                elInjector.get(ComponentFactoryResolver);\n            const componentFactory: ComponentFactory<any> =\n                componentFactoryResolver.resolveComponentFactory(this.ngComponent);\n            this.componentRef = this.viewContainerRef.createComponent(\n                componentFactory,\n                this.viewContainerRef.length,\n                elInjector,\n                this.ngComponent\n            );\n            this.componentRef.instance.props = this.ngComponentInput;\n        }\n    }\n}\n",
    "\nimport {\n    ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input,\n    IterableChangeRecord, IterableChanges, IterableDiffer,\n    IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef,\n    TrackByFunction, ViewContainerRef, forwardRef, isDevMode\n} from '@angular/core';\nimport {\n    KeyValueDiffer, KeyValueChanges, KeyValueChangeRecord,\n    KeyValueDifferFactory, KeyValueDiffers\n} from '@angular/core';\nexport interface EachKeyValue<T> {\n    [key: string]: T;\n}\nexport class NgEachOfContext<T> {\n    constructor(\n        public $implicit: T,\n        public ngForOf: EachKeyValue<T>,\n        public key: string,\n    ) { }\n}\n\n@Directive({ selector: '[ngEach][ngEachOf]' })\nexport class NgEachOf<T> implements DoCheck, OnChanges {\n    @Input() ngEachOf: EachKeyValue<T>;\n    private _differ: KeyValueDiffer<string, T> | null = null;\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        private _template: TemplateRef<NgEachOfContext<T>>,\n        private _differs: KeyValueDiffers\n    ) { }\n    @Input()\n    set ngForTemplate(value: TemplateRef<NgEachOfContext<T>>) {\n        if (value) {\n            this._template = value;\n        }\n    }\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('ngEachOf' in changes) {\n            const value = changes['ngEachOf'].currentValue;\n            if (!this._differ && value) {\n                this._differ = this._differs.find(value).create();\n            }\n        }\n    }\n    ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.ngEachOf);\n            if (changes) this._applyChanges(changes);\n        }\n    }\n\n    private _applyChanges(changes: KeyValueChanges<string, T>) {\n        const insertTuples: RecordViewTuple<T>[] = [];\n        changes.forEachItem(\n            (item: KeyValueChangeRecord<string, T>) => {\n                if (item.previousValue == null) {\n                    const view = this._viewContainer.createEmbeddedView(\n                        this._template,\n                        new NgEachOfContext<T>(item.currentValue, this.ngEachOf, item.key),\n                        parseInt(item.key, 16)\n                    );\n                    const tuple = new RecordViewTuple<T>(item, view, parseInt(item.key, 16));\n                    insertTuples.push(tuple);\n                } else if (item.currentValue == null) {\n                    this._viewContainer.remove(parseInt(item.key, 16));\n                } else {\n                    const view = this._viewContainer.get(parseInt(item.key, 16))!;\n                    this._viewContainer.move(view, parseInt(item.key, 16));\n                    const tuple = new RecordViewTuple(\n                        item.currentValue,\n                        <EmbeddedViewRef<NgEachOfContext<T>>>view,\n                        parseInt(item.key, 16)\n                    );\n                    insertTuples.push(tuple);\n                }\n            }\n        );\n    }\n}\n\nclass RecordViewTuple<T> {\n    constructor(\n        public record: any,\n        public view: EmbeddedViewRef<NgEachOfContext<T>>,\n        public index: number\n    ) { }\n}\n",
    "\nimport { EventEmitter, NgZone, Input, Output, KeyValueDiffer } from '@angular/core';\nimport { OnChanges, KeyValueChanges, DoCheck, KeyValueDiffers } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/share';\n\nfunction defaults(target: any, options: any): KeyValue {\n    if (target === null || (typeof target !== 'object' && typeof target !== 'function')) {\n        target = {};\n    }\n    if (options) {\n        target = { ...target, ...options };\n    }\n    return target;\n}\nexport interface KeyValue {\n    [key: string]: any;\n}\nexport abstract class ReactComponent<P extends KeyValue, T extends KeyValue> {\n    private _state: T;\n    @Input()\n    set state(val: T) {\n        this.setState(val);\n    }\n    get state(): T {\n        return this._state;\n    }\n    get state$(): Observable<KeyValue> {\n        return this.stateChange.share();\n    }\n    private _props: P;\n    @Input()\n    set props(val: P) {\n        this.setProps(val);\n    }\n    get props(): P {\n        return this._props;\n    }\n    get props$(): Observable<P> {\n        return this.propsChange.share();\n    }\n    @Output() stateChange: EventEmitter<T> = new EventEmitter();\n    @Output() propsChange: EventEmitter<P> = new EventEmitter();\n    private _stateDiffer: KeyValueDiffer<string, any>;\n    private _propsDiffer: KeyValueDiffer<string, any>;\n    constructor(\n        private _differs: KeyValueDiffers\n    ) {\n        this._props = {} as P;\n        this._state = {} as T;\n\n    }\n\n    setState(state: T): Observable<KeyValue> {\n        this._stateChanges();\n        this._state = defaults(this._state, state) as T;\n        const diffter = this._stateDiffer.diff(this._state);\n        if (diffter) {\n            this.onStateChange(diffter);\n            this.stateChange.emit(this._state);\n        }\n        return this.state$;\n    }\n\n    setProps(props: P): Observable<P> {\n        this._propsChanges();\n        this._props = defaults(this._props, props) as P;\n        const diffter = this._propsDiffer.diff(this._props);\n        if (diffter) {\n            this.onPropsChange(diffter);\n            this.propsChange.emit(this._props);\n        }\n        return this.props$;\n    }\n    private _stateChanges() {\n        this._stateDiffer = this._differs.find(this._state).create();\n        return this._stateDiffer.diff(this._state);\n    }\n    private _propsChanges() {\n        this._propsDiffer = this._differs.find(this._props).create();\n        return this._propsDiffer.diff(this._props);\n    }\n    abstract onPropsChange(changes: KeyValueChanges<string, any>): void;\n    abstract onStateChange(changes: KeyValueChanges<string, any>): void;\n}\n"
  ],
  "names": [],
  "mappings": "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"
}
