{
  "version": 3,
  "file": "ng-react-component.umd.js",
  "sources": [
    "ng://ng-react-component/react.component.list.ts",
    "ng://ng-react-component/createLib.ts",
    "ng://ng-react-component/common/common.module.ts",
    "ng://ng-react-component/common/ng-component.ts",
    "ng://ng-react-component/common/ng-each-of.ts",
    "ng://ng-react-component/react.component.setting.ts",
    "ng://ng-react-component/react.component.ts"
  ],
  "sourcesContent": [
    "import { ReactComponent, KeyValue } from './react.component';\nimport { KeyValueDiffers, ElementRef, Renderer2 } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl } from '@angular/forms';\n// 设置\nimport { DesignPropsService } from 'meepo-idesign-share';\nexport abstract class ReactComponentList<P extends KeyValue, T extends KeyValue> extends ReactComponent<P, T> {\n    _allChecked = false;\n    _indeterminate = false;\n    _displayData = [];\n    data: any = [];\n    constructor(\n        differs: KeyValueDiffers,\n        ele: ElementRef,\n        render: Renderer2\n    ) {\n        super(differs, ele, render);\n    }\n\n    _displayDataChange($event) {\n        this._displayData = $event;\n        this._refreshStatus();\n    }\n\n    _refreshStatus() {\n        const allChecked = this._displayData.every(value => value.disabled || value.checked);\n        const allUnChecked = this._displayData.every(value => value.disabled || !value.checked);\n        this._allChecked = allChecked;\n        this._indeterminate = (!allChecked) && (!allUnChecked);\n    }\n\n    _checkAll(value) {\n        if (value) {\n            this._displayData.forEach(data => {\n                if (!data.disabled) {\n                    data.checked = true;\n                }\n            });\n        } else {\n            this._displayData.forEach(data => data.checked = false);\n        }\n        this._refreshStatus();\n    }\n}",
    "export class CreateLib {\n    constructor(\n        public name: string,\n        public title: string,\n        public props: any = {},\n        public children: any[] = [],\n        public father: string = null,\n        public uuid: string = null,\n        public state: any = {},\n        public items: any[] = []\n    ) { \n        this.uuid = this.uuid || guid();\n    }\n}\n\nexport function guid() {\n    function S4() {\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n    }\n    return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\n}\n",
    "import { NgModule } from '@angular/core';\nimport { NgEachOf } from './ng-each-of';\nimport { NgComponentPreviewDirective } from './ng-component';\n@NgModule({\n    exports: [\n        NgEachOf,\n        NgComponentPreviewDirective\n    ],\n    declarations: [\n        NgEachOf,\n        NgComponentPreviewDirective\n    ]\n})\nexport class ReactCommonModule { }\n",
    "\nimport {\n    ComponentFactoryResolver, ComponentRef, Directive,\n    Injector, Input, NgModuleFactory, NgModuleRef,\n    OnChanges, OnDestroy, SimpleChanges, StaticProvider,\n    Type, ViewContainerRef, Output, OnInit, ComponentFactory\n} from '@angular/core';\n\n@Directive({ selector: '[ngComponentPreview]' })\nexport class NgComponentPreviewDirective implements OnInit {\n    viewContainerRef: any;\n    componentRef: ComponentRef<any>;\n    moduleRef: any;\n\n    @Input() ngComponent: any;\n    @Input() ngComponentInput: any;\n    @Output() Output: any;\n\n    constructor(_viewContainerRef: ViewContainerRef) {\n        this.viewContainerRef = _viewContainerRef;\n    }\n\n    ngOnInit() {\n        // console.log(this.ngComponentInput);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.viewContainerRef.clear();\n        this.componentRef = null;\n        if (this.ngComponent) {\n            const elInjector = this.viewContainerRef.parentInjector;\n            const componentFactoryResolver: ComponentFactoryResolver = this.moduleRef ? this.moduleRef.componentFactoryResolver :\n                elInjector.get(ComponentFactoryResolver);\n            const componentFactory: ComponentFactory<any> =\n                componentFactoryResolver.resolveComponentFactory(this.ngComponent);\n            this.componentRef = this.viewContainerRef.createComponent(\n                componentFactory,\n                this.viewContainerRef.length,\n                elInjector,\n                this.ngComponent\n            );\n            this.componentRef.instance.props = this.ngComponentInput;\n        }\n    }\n}\n",
    "\nimport {\n    ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input,\n    IterableChangeRecord, IterableChanges, IterableDiffer,\n    IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef,\n    TrackByFunction, ViewContainerRef, forwardRef, isDevMode\n} from '@angular/core';\n\nimport {\n    KeyValueDiffer, KeyValueChanges, KeyValueChangeRecord,\n    KeyValueDifferFactory, KeyValueDiffers\n} from '@angular/core';\n\nexport interface EachKeyValue<T> {\n    [key: string]: T;\n}\n\nexport class NgEachOfContext<T> {\n    constructor(\n        public $implicit: T,\n        public ngForOf: EachKeyValue<T>,\n        public key: string,\n    ) { }\n}\n\n@Directive({ selector: '[ngEach][ngEachOf]' })\nexport class NgEachOf<T> implements DoCheck, OnChanges {\n    @Input() ngEachOf: EachKeyValue<T>;\n    private _differ: KeyValueDiffer<string, T> | null = null;\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        private _template: TemplateRef<NgEachOfContext<T>>,\n        private _differs: KeyValueDiffers\n    ) { }\n    @Input()\n    set ngForTemplate(value: TemplateRef<NgEachOfContext<T>>) {\n        if (value) {\n            this._template = value;\n        }\n    }\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('ngEachOf' in changes) {\n            const value = changes['ngEachOf'].currentValue;\n            if (!this._differ && value) {\n                this._differ = this._differs.find(value).create();\n            }\n        }\n    }\n    ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.ngEachOf);\n            if (changes) this._applyChanges(changes);\n        }\n    }\n\n    private _applyChanges(changes: KeyValueChanges<string, T>) {\n        const insertTuples: RecordViewTuple<T>[] = [];\n        changes.forEachItem(\n            (item: KeyValueChangeRecord<string, T>) => {\n                if (item.previousValue == null) {\n                    const view = this._viewContainer.createEmbeddedView(\n                        this._template,\n                        new NgEachOfContext<T>(item.currentValue, this.ngEachOf, item.key),\n                        parseInt(item.key, 16)\n                    );\n                    const tuple = new RecordViewTuple<T>(item, view, parseInt(item.key, 16));\n                    insertTuples.push(tuple);\n                } else if (item.currentValue == null) {\n                    this._viewContainer.remove(parseInt(item.key, 16));\n                } else {\n                    const view = this._viewContainer.get(parseInt(item.key, 16))!;\n                    this._viewContainer.move(view, parseInt(item.key, 16));\n                    const tuple = new RecordViewTuple(\n                        item.currentValue,\n                        <EmbeddedViewRef<NgEachOfContext<T>>>view,\n                        parseInt(item.key, 16)\n                    );\n                    insertTuples.push(tuple);\n                }\n            }\n        );\n    }\n}\n\nclass RecordViewTuple<T> {\n    constructor(\n        public record: any,\n        public view: EmbeddedViewRef<NgEachOfContext<T>>,\n        public index: number\n    ) { }\n}\n",
    "import { ReactComponent, KeyValue } from './react.component';\nimport { KeyValueDiffers, ElementRef, Renderer2 } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl } from '@angular/forms';\n// 设置\nimport { DesignPropsService } from 'meepo-idesign-share';\nexport abstract class ReactComponentSetting<P extends KeyValue, T extends KeyValue> extends ReactComponent<P, T> {\n    form: FormGroup;\n    instance: any;\n    element: HTMLElement;\n    constructor(\n        differs: KeyValueDiffers,\n        ele: ElementRef,\n        render: Renderer2,\n        public fb: FormBuilder,\n        public _props: DesignPropsService\n    ) {\n        super(differs, ele, render);\n        this.form = this.fb.group({});\n    }\n\n    ngOnInit() {\n        this.instance = this.instance || this._props.instance;\n        if (this.instance) {\n            this.element = this.instance.ele.nativeElement;\n        }\n    }\n\n    objToArray(obj: any) {\n        const arrs: any[] = [];\n        for (const key in obj) {\n            arrs.push({\n                key: key,\n                obj: obj\n            });\n        }\n        return arrs;\n    }\n\n    initStyleForm() {\n        for (const key in this.props.style) {\n            this.form.addControl(key, new FormControl(this.props.style[key]));\n        }\n        this.form.valueChanges.subscribe(res => {\n            this.props.style = res;\n            this.onStyleChange(res);\n        });\n    }\n\n    checkFormField(name: string, value: any, to?: FormGroup) {\n        if (to) {\n            if (!to.contains(name)) {\n                to.addControl(name, new FormControl(value))\n            }\n        } else {\n            if (!this.form.contains(name)) {\n                this.form.addControl(name, new FormControl(value))\n            }\n        }\n    }\n\n    getFormType(group: FormGroup, name: string) {\n        let control: FormControl = group.get(name) as FormControl;\n        let type: string = typeof control.value;\n        return type;\n    }\n\n    checkFormGroup(name: string, obj: any) {\n        let group = this.fb.group({});\n        for (const key in obj) {\n            this.checkFormField(key, obj[key], group);\n        }\n        if (!this.form.contains(name)) {\n            this.form.addControl(name, group);\n        }\n    }\n\n    onStyleChange(res) {\n        this.setStyle(res, this.instance.ele.nativeElement);\n    }\n\n    removeSelf() {\n        const props: any = this._props.getPropsByUid(this.guid);\n        this._props.removePropsByUid(props.uuid);\n    }\n}",
    "\nimport {\n    EventEmitter, NgZone, Input, Output,\n    KeyValueDiffer, HostListener, HostBinding, ElementRef,\n    Renderer2, isDevMode\n} from '@angular/core';\nimport { OnChanges, KeyValueChanges, DoCheck, KeyValueDiffers, SimpleChanges } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/share';\n\nfunction guid() {\n    function S4() {\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n    }\n    return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\n}\nfunction type(val): string {\n    return typeof val;\n}\nfunction defaults(target: any, options: any): KeyValue {\n    if (target === null || (typeof target !== 'object' && typeof target !== 'function')) {\n        target = {};\n    }\n    if (options) {\n        target = { ...target, ...options };\n    }\n    return target;\n}\n\nexport interface KeyValue {\n    [key: string]: any;\n    children: any[];\n}\n\nexport interface ReactBase extends KeyValue {\n    // 可拖拽\n    canDrag?: boolean;\n    // 可放置\n    canDrop?: boolean;\n    // 可移动\n    canMove?: boolean;\n    // 可缩放\n    canScale?: boolean;\n    // focus\n    focus?: boolean;\n    // 可配置\n    canSetting?: boolean;\n}\n\nexport abstract class ReactComponent<P extends ReactBase, T extends KeyValue> implements OnChanges, DoCheck {\n    @Input() state: T;\n    get state$(): Observable<KeyValue> {\n        return this.stateChange.share();\n    }\n    @Input() props: P;\n    get props$(): Observable<P> {\n        return this.propsChange.share();\n    }\n    @Output() stateChange: EventEmitter<T> = new EventEmitter();\n    @Output() propsChange: EventEmitter<P> = new EventEmitter();\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n    @Output() onHover: EventEmitter<any> = new EventEmitter();\n    @HostListener('click', ['$event'])\n    _onClick(e: Event) {\n        this.onClick.emit(e);\n    }\n\n    @Input() params = {};\n    private _stateDiffer: KeyValueDiffer<string, any>;\n    private _propsDiffer: KeyValueDiffer<string, any>;\n\n    set guid(val: string) {\n        this._id = val;\n    }\n    get guid() {\n        return this._id;\n    }\n    instance: any;\n    @HostBinding('attr.id') _id: string;\n    constructor(\n        private _differs: KeyValueDiffers,\n        public ele: ElementRef,\n        public render: Renderer2\n    ) {\n        this.props = {\n            children: []\n        } as P;\n        this.state = {} as T;\n    }\n\n    createGuid() {\n        return guid();\n    }\n\n    getNative() {\n        return this.ele.nativeElement;\n    }\n\n    setState(state: T): void {\n        this._stateDiffer = this._differs.find(this.state).create();\n        this.state = state;\n        this.ngDoCheck();\n    }\n\n    setProps(props: P): void {\n        this._propsDiffer = this._differs.find(this.props).create();\n        this.props = props;\n        this.ngDoCheck();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if ('props' in changes) {\n            const value = changes['props'].currentValue;\n            this._propsDiffer = this._differs.find(value).create();\n        }\n        if ('state' in changes) {\n            const value = changes['state'].currentValue;\n            this._stateDiffer = this._differs.find(value).create();\n        }\n    }\n\n    ngDoCheck(): void {\n        if (this._propsDiffer) {\n            const changes = this._propsDiffer.diff(this.props);\n            if (changes) this._propsChanges(changes);\n        }\n        if (this._stateDiffer) {\n            const changes = this._stateDiffer.diff(this.state);\n            if (changes) this._stateChanges(changes);\n        }\n    }\n\n    setClass(classObj: { [key: string]: boolean }, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (!ele) {\n            return '';\n        }\n        for (const key in classObj) {\n            if (classObj[key]) {\n                this.render.addClass(ele, key);\n            } else {\n                this.render.removeClass(ele, key);\n            }\n        }\n    }\n\n    setStyle(styleObj: { [key: string]: string }, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (!ele) {\n            return '';\n        }\n        for (const key in styleObj) {\n            // 检查单位\n            let [name, unit] = key.split('.');\n            let value = styleObj[key];\n            value = value != null && unit ? `${value}${unit}` : value;\n            name = this.humpToHyphen(name);\n            this.render.setStyle(ele, name, value);\n        }\n    }\n\n    removeStyle(styles: any, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (!ele) {\n            return '';\n        }\n        if (type(styles) == 'array' && type(styles) !== 'undefined') {\n            styles.map(key => {\n                this.render.removeStyle(ele, key);\n            });\n        } else {\n            this.render.removeStyle(ele, styles);\n        }\n    }\n    // 下划线转驼峰\n    hyphenToHump(str: string) {\n        const preg = new RegExp('//-(/w)/g');\n        return str.replace(preg, (all, letter) => {\n            return letter.toUpperCase();\n        });\n    }\n    // 驼峰转下划线\n    humpToHyphen(str: string) {\n        return str.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n    }\n\n    addStyle(name: string, value: string, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (!ele) {\n            return '';\n        }\n        this.render.setStyle(ele, name, value);\n    }\n\n    addClass(name: string, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (!ele) {\n            return '';\n        }\n        this.render.addClass(this.ele.nativeElement, name);\n    }\n\n    setAttribute(classObj: { [key: string]: any }, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (!ele) {\n            return '';\n        }\n        for (const key in classObj) {\n            if (type(classObj[key]) === 'boolean') {\n                if (classObj[key]) {\n                    this.render.setAttribute(ele, key, 'true');\n                } else {\n                    this.render.removeAttribute(ele, key);\n                }\n            } else {\n                this.render.setAttribute(ele, key, classObj[key]);\n            }\n        }\n    }\n\n    removeClass(name: string, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (!ele) {\n            return '';\n        }\n        this.render.removeClass(ele, name);\n    }\n\n    private _stateChanges(changes: KeyValueChanges<string, T>) {\n        this.onStateChange(changes);\n        this.stateChange.emit(this.state);\n    }\n    private _propsChanges(changes) {\n        this.onPropsChange(changes);\n        this.propsChange.emit(this.props);\n    }\n\n    public createMobileUrl(_do: string, params?: any, isDev: boolean = false) {\n        params = params || {};\n        params = { ...params, ...this.params };\n        params['do'] = _do;\n        params['c'] = params['c'] || 'entry';\n        params['i'] = params['i'] || '2';\n        let url = this.puts(params);\n        return `${this.getRoot()}/app/index.php${url}`;\n    }\n    public createWebUrl(_do: string, params?: any, isDev: boolean = false) {\n        params = params || {};\n        params = { ...params, ...this.params };\n        params['do'] = _do;\n        params['c'] = params['c'] || 'site';\n        params['a'] = params['a'] || 'entry';\n        params['i'] = params['i'] || '2';\n        let url = ``;\n        if (!isDevMode() || isDev) {\n            return `${this.getRoot()}/web/index.php${this.puts(params)}`;\n        } else {\n            return `/assets/data/${params['i']}/web/${_do}.json`\n        }\n    }\n\n    private getRoot() {\n        const { origin, protocol, port, host } = window.location;\n        if (isDevMode()) {\n            return `https://meepo.com.cn`;\n        } else {\n            return `${protocol}//${host}`;\n        }\n    }\n\n    private parseURL(): { [k: string]: string } {\n        const ret = {};\n        const seg = location.search.replace(/^\\?/, '').split('&').filter(function (v, i) {\n            if (v !== '' && v.indexOf('=')) {\n                return true;\n            }\n        });\n        seg.forEach((element, index) => {\n            const idx = element.indexOf('=');\n            const key = element.substring(0, idx);\n            const val = element.substring(idx + 1);\n            ret[key] = val;\n        });\n        return ret;\n    }\n\n    public get(name: string): string {\n        const parse = this.parseURL();\n        return parse[name] ? parse[name] : '';\n    }\n\n    public put(name: string, value: any, loc?: string) {\n        const parse = this.parseURL();\n        loc = loc || location.search;\n        // 是否有\n        if (loc.indexOf(`${name}=`) > -1) {\n            loc = loc.replace(`${name}=${parse[name]}`, `${name}=${value}`);\n        } else {\n            loc = `${loc}&${name}=${value}`;\n        }\n        return loc;\n    }\n\n    public puts(values: { [k: string]: string }) {\n        let loc = location.search;\n        for (const key in values) {\n            loc = this.put(key, values[key], loc);\n        }\n        return loc;\n    }\n    abstract onPropsChange(changes: KeyValueChanges<string, P>): void;\n    abstract onStateChange(changes: KeyValueChanges<string, T>): void;\n}\n"
  ],
  "names": [
    "NgModule",
    "Output",
    "guid",
    "Input",
    "ViewContainerRef",
    "Directive",
    "KeyValueDiffers",
    "TemplateRef",
    "FormControl",
    "HostBinding",
    "HostListener",
    "EventEmitter"
  ],
  "mappings": "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"
}
