{
  "version": 3,
  "file": "ng-react-component.umd.js",
  "sources": [
    "ng://ng-react-component/common/common.module.ts",
    "ng://ng-react-component/common/ng-component.ts",
    "ng://ng-react-component/common/ng-each-of.ts",
    "ng://ng-react-component/react.component.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { NgEachOf } from './ng-each-of';\nimport { NgComponentDirective } from './ng-component';\n@NgModule({\n    exports: [\n        NgEachOf,\n        NgComponentDirective\n    ],\n    declarations: [\n        NgEachOf,\n        NgComponentDirective\n    ]\n})\nexport class ReactCommonModule { }\n",
    "\nimport {\n    ComponentFactoryResolver, ComponentRef, Directive,\n    Injector, Input, NgModuleFactory, NgModuleRef,\n    OnChanges, OnDestroy, SimpleChanges, StaticProvider,\n    Type, ViewContainerRef, Output, OnInit, ComponentFactory\n} from '@angular/core';\n\n@Directive({ selector: '[ngComponent]' })\nexport class NgComponentDirective implements OnInit {\n    viewContainerRef: any;\n    componentRef: ComponentRef<any>;\n    moduleRef: any;\n\n    @Input() ngComponent: any;\n    @Input() ngComponentInput: any;\n    @Output() Output: any;\n\n    constructor(_viewContainerRef: ViewContainerRef) {\n        this.viewContainerRef = _viewContainerRef;\n    }\n\n    ngOnInit() {\n        // console.log(this.ngComponentInput);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.viewContainerRef.clear();\n        this.componentRef = null;\n        if (this.ngComponent) {\n            const elInjector = this.viewContainerRef.parentInjector;\n            const componentFactoryResolver: ComponentFactoryResolver = this.moduleRef ? this.moduleRef.componentFactoryResolver :\n                elInjector.get(ComponentFactoryResolver);\n            const componentFactory: ComponentFactory<any> =\n                componentFactoryResolver.resolveComponentFactory(this.ngComponent);\n            this.componentRef = this.viewContainerRef.createComponent(\n                componentFactory,\n                this.viewContainerRef.length,\n                elInjector,\n                this.ngComponent\n            );\n            this.componentRef.instance.props = this.ngComponentInput;\n        }\n    }\n}\n",
    "\nimport {\n    ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input,\n    IterableChangeRecord, IterableChanges, IterableDiffer,\n    IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef,\n    TrackByFunction, ViewContainerRef, forwardRef, isDevMode\n} from '@angular/core';\nimport {\n    KeyValueDiffer, KeyValueChanges, KeyValueChangeRecord,\n    KeyValueDifferFactory, KeyValueDiffers\n} from '@angular/core';\nexport interface EachKeyValue<T> {\n    [key: string]: T;\n}\nexport class NgEachOfContext<T> {\n    constructor(\n        public $implicit: T,\n        public ngForOf: EachKeyValue<T>,\n        public key: string,\n    ) { }\n}\n\n@Directive({ selector: '[ngEach][ngEachOf]' })\nexport class NgEachOf<T> implements DoCheck, OnChanges {\n    @Input() ngEachOf: EachKeyValue<T>;\n    private _differ: KeyValueDiffer<string, T> | null = null;\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        private _template: TemplateRef<NgEachOfContext<T>>,\n        private _differs: KeyValueDiffers\n    ) { }\n    @Input()\n    set ngForTemplate(value: TemplateRef<NgEachOfContext<T>>) {\n        if (value) {\n            this._template = value;\n        }\n    }\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('ngEachOf' in changes) {\n            const value = changes['ngEachOf'].currentValue;\n            if (!this._differ && value) {\n                this._differ = this._differs.find(value).create();\n            }\n        }\n    }\n    ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.ngEachOf);\n            if (changes) this._applyChanges(changes);\n        }\n    }\n\n    private _applyChanges(changes: KeyValueChanges<string, T>) {\n        const insertTuples: RecordViewTuple<T>[] = [];\n        changes.forEachItem(\n            (item: KeyValueChangeRecord<string, T>) => {\n                if (item.previousValue == null) {\n                    const view = this._viewContainer.createEmbeddedView(\n                        this._template,\n                        new NgEachOfContext<T>(item.currentValue, this.ngEachOf, item.key),\n                        parseInt(item.key, 16)\n                    );\n                    const tuple = new RecordViewTuple<T>(item, view, parseInt(item.key, 16));\n                    insertTuples.push(tuple);\n                } else if (item.currentValue == null) {\n                    this._viewContainer.remove(parseInt(item.key, 16));\n                } else {\n                    const view = this._viewContainer.get(parseInt(item.key, 16))!;\n                    this._viewContainer.move(view, parseInt(item.key, 16));\n                    const tuple = new RecordViewTuple(\n                        item.currentValue,\n                        <EmbeddedViewRef<NgEachOfContext<T>>>view,\n                        parseInt(item.key, 16)\n                    );\n                    insertTuples.push(tuple);\n                }\n            }\n        );\n    }\n}\n\nclass RecordViewTuple<T> {\n    constructor(\n        public record: any,\n        public view: EmbeddedViewRef<NgEachOfContext<T>>,\n        public index: number\n    ) { }\n}\n",
    "\nimport { EventEmitter, NgZone, Input, Output, KeyValueDiffer } from '@angular/core';\nimport { OnChanges, KeyValueChanges, DoCheck, KeyValueDiffers } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/share';\n\nfunction defaults(target: any, options: any): KeyValue {\n    if (target === null || (typeof target !== 'object' && typeof target !== 'function')) {\n        target = {};\n    }\n    if (options) {\n        target = { ...target, ...options };\n    }\n    return target;\n}\nexport interface KeyValue {\n    [key: string]: any;\n}\nexport abstract class ReactComponent<P extends KeyValue, T extends KeyValue> {\n    private _state: T;\n    @Input()\n    set state(val: T) {\n        this.setState(val);\n    }\n    get state(): T {\n        return this._state;\n    }\n    get state$(): Observable<KeyValue> {\n        return this.stateChange.share();\n    }\n    private _props: P;\n    @Input()\n    set props(val: P) {\n        this.setProps(val);\n    }\n    get props(): P {\n        return this._props;\n    }\n    get props$(): Observable<P> {\n        return this.propsChange.share();\n    }\n    @Output() stateChange: EventEmitter<T> = new EventEmitter();\n    @Output() propsChange: EventEmitter<P> = new EventEmitter();\n    private _stateDiffer: KeyValueDiffer<string, any>;\n    private _propsDiffer: KeyValueDiffer<string, any>;\n    constructor(\n        private _differs: KeyValueDiffers\n    ) {\n        this._props = {} as P;\n        this._state = {} as T;\n\n    }\n\n    setState(state: T): Observable<KeyValue> {\n        this._stateChanges();\n        this._state = defaults(this._state, state) as T;\n        const diffter = this._stateDiffer.diff(this._state);\n        if (diffter) {\n            this.onStateChange(diffter);\n            this.stateChange.emit(this._state);\n        }\n        return this.state$;\n    }\n\n    setProps(props: P): Observable<P> {\n        this._propsChanges();\n        this._props = defaults(this._props, props) as P;\n        const diffter = this._propsDiffer.diff(this._props);\n        if (diffter) {\n            this.onPropsChange(diffter);\n            this.propsChange.emit(this._props);\n        }\n        return this.props$;\n    }\n    private _stateChanges() {\n        this._stateDiffer = this._differs.find(this._state).create();\n        return this._stateDiffer.diff(this._state);\n    }\n    private _propsChanges() {\n        this._propsDiffer = this._differs.find(this._props).create();\n        return this._propsDiffer.diff(this._props);\n    }\n    abstract onPropsChange(changes: KeyValueChanges<string, any>): void;\n    abstract onStateChange(changes: KeyValueChanges<string, any>): void;\n}\n"
  ],
  "names": [
    "Input",
    "ViewContainerRef",
    "Directive",
    "EventEmitter"
  ],
  "mappings": "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"
}
