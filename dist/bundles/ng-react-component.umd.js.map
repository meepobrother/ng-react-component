{
  "version": 3,
  "file": "ng-react-component.umd.js",
  "sources": [
    "ng://ng-react-component/common/common.module.ts",
    "ng://ng-react-component/common/ng-component.ts",
    "ng://ng-react-component/common/ng-each-of.ts",
    "ng://ng-react-component/react.component.setting.ts",
    "ng://ng-react-component/react.component.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { NgEachOf } from './ng-each-of';\nimport { NgComponentDirective } from './ng-component';\n@NgModule({\n    exports: [\n        NgEachOf,\n        NgComponentDirective\n    ],\n    declarations: [\n        NgEachOf,\n        NgComponentDirective\n    ]\n})\nexport class ReactCommonModule { }\n",
    "\nimport {\n    ComponentFactoryResolver, ComponentRef, Directive,\n    Injector, Input, NgModuleFactory, NgModuleRef,\n    OnChanges, OnDestroy, SimpleChanges, StaticProvider,\n    Type, ViewContainerRef, Output, OnInit, ComponentFactory\n} from '@angular/core';\n\n@Directive({ selector: '[ngComponent]' })\nexport class NgComponentDirective implements OnInit {\n    viewContainerRef: any;\n    componentRef: ComponentRef<any>;\n    moduleRef: any;\n\n    @Input() ngComponent: any;\n    @Input() ngComponentInput: any;\n    @Output() Output: any;\n\n    constructor(_viewContainerRef: ViewContainerRef) {\n        this.viewContainerRef = _viewContainerRef;\n    }\n\n    ngOnInit() {\n        // console.log(this.ngComponentInput);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.viewContainerRef.clear();\n        this.componentRef = null;\n        if (this.ngComponent) {\n            const elInjector = this.viewContainerRef.parentInjector;\n            const componentFactoryResolver: ComponentFactoryResolver = this.moduleRef ? this.moduleRef.componentFactoryResolver :\n                elInjector.get(ComponentFactoryResolver);\n            const componentFactory: ComponentFactory<any> =\n                componentFactoryResolver.resolveComponentFactory(this.ngComponent);\n            this.componentRef = this.viewContainerRef.createComponent(\n                componentFactory,\n                this.viewContainerRef.length,\n                elInjector,\n                this.ngComponent\n            );\n            this.componentRef.instance.props = this.ngComponentInput;\n        }\n    }\n}\n",
    "\nimport {\n    ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input,\n    IterableChangeRecord, IterableChanges, IterableDiffer,\n    IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef,\n    TrackByFunction, ViewContainerRef, forwardRef, isDevMode\n} from '@angular/core';\nimport {\n    KeyValueDiffer, KeyValueChanges, KeyValueChangeRecord,\n    KeyValueDifferFactory, KeyValueDiffers\n} from '@angular/core';\nexport interface EachKeyValue<T> {\n    [key: string]: T;\n}\nexport class NgEachOfContext<T> {\n    constructor(\n        public $implicit: T,\n        public ngForOf: EachKeyValue<T>,\n        public key: string,\n    ) { }\n}\n\n@Directive({ selector: '[ngEach][ngEachOf]' })\nexport class NgEachOf<T> implements DoCheck, OnChanges {\n    @Input() ngEachOf: EachKeyValue<T>;\n    private _differ: KeyValueDiffer<string, T> | null = null;\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        private _template: TemplateRef<NgEachOfContext<T>>,\n        private _differs: KeyValueDiffers\n    ) { }\n    @Input()\n    set ngForTemplate(value: TemplateRef<NgEachOfContext<T>>) {\n        if (value) {\n            this._template = value;\n        }\n    }\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('ngEachOf' in changes) {\n            const value = changes['ngEachOf'].currentValue;\n            if (!this._differ && value) {\n                this._differ = this._differs.find(value).create();\n            }\n        }\n    }\n    ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.ngEachOf);\n            if (changes) this._applyChanges(changes);\n        }\n    }\n\n    private _applyChanges(changes: KeyValueChanges<string, T>) {\n        const insertTuples: RecordViewTuple<T>[] = [];\n        changes.forEachItem(\n            (item: KeyValueChangeRecord<string, T>) => {\n                if (item.previousValue == null) {\n                    const view = this._viewContainer.createEmbeddedView(\n                        this._template,\n                        new NgEachOfContext<T>(item.currentValue, this.ngEachOf, item.key),\n                        parseInt(item.key, 16)\n                    );\n                    const tuple = new RecordViewTuple<T>(item, view, parseInt(item.key, 16));\n                    insertTuples.push(tuple);\n                } else if (item.currentValue == null) {\n                    this._viewContainer.remove(parseInt(item.key, 16));\n                } else {\n                    const view = this._viewContainer.get(parseInt(item.key, 16))!;\n                    this._viewContainer.move(view, parseInt(item.key, 16));\n                    const tuple = new RecordViewTuple(\n                        item.currentValue,\n                        <EmbeddedViewRef<NgEachOfContext<T>>>view,\n                        parseInt(item.key, 16)\n                    );\n                    insertTuples.push(tuple);\n                }\n            }\n        );\n    }\n}\n\nclass RecordViewTuple<T> {\n    constructor(\n        public record: any,\n        public view: EmbeddedViewRef<NgEachOfContext<T>>,\n        public index: number\n    ) { }\n}\n",
    "import { ReactComponent, KeyValue } from './react.component';\nimport { KeyValueDiffers, ElementRef, Renderer2 } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl } from '@angular/forms';\nexport abstract class ReactComponentSetting<P extends KeyValue, T extends KeyValue> extends ReactComponent<P, T> {\n    form: FormGroup;\n    constructor(\n        differs: KeyValueDiffers,\n        ele: ElementRef,\n        render: Renderer2,\n        public fb: FormBuilder\n    ) {\n        super(differs, ele, render);\n        this.form = this.fb.group({});\n    }\n\n    initStyleForm() {\n        for (const key in this.props.style) {\n            this.form.addControl(key, new FormControl(this.props.style[key]));\n        }\n        this.form.valueChanges.subscribe(res => {\n            this.props.style = res;\n            this.onStateChange(res);\n        });\n    }\n\n    onStyleChange(res) {\n        this.setStyle(res, this.instance.ele.nativeElement);\n    }\n}",
    "\nimport {\n    EventEmitter, NgZone, Input, Output,\n    KeyValueDiffer, HostListener, HostBinding, ElementRef,\n    Renderer2\n} from '@angular/core';\nimport { OnChanges, KeyValueChanges, DoCheck, KeyValueDiffers, SimpleChanges } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/share';\n\nfunction guid() {\n    function S4() {\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n    }\n    return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\n}\nfunction type(val): string {\n    return typeof val;\n}\nfunction defaults(target: any, options: any): KeyValue {\n    if (target === null || (typeof target !== 'object' && typeof target !== 'function')) {\n        target = {};\n    }\n    if (options) {\n        target = { ...target, ...options };\n    }\n    return target;\n}\nexport interface KeyValue {\n    [key: string]: any;\n    children: any[];\n}\nexport abstract class ReactComponent<P extends KeyValue, T extends KeyValue> implements OnChanges, DoCheck {\n    @Input() state: T;\n    get state$(): Observable<KeyValue> {\n        return this.stateChange.share();\n    }\n    @Input() props: P;\n    get props$(): Observable<P> {\n        return this.propsChange.share();\n    }\n    @Output() stateChange: EventEmitter<T> = new EventEmitter();\n    @Output() propsChange: EventEmitter<P> = new EventEmitter();\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n    /**\n     * 监听click事件\n     * @param e \n     */\n    @HostListener('click', ['$event'])\n    _onClick(e: Event) {\n        this.onClick.emit(e);\n    }\n    private _stateDiffer: KeyValueDiffer<string, any>;\n    private _propsDiffer: KeyValueDiffer<string, any>;\n\n    set guid(val: string) {\n        this._id = val;\n    }\n    get guid() {\n        return this._id;\n    }\n    instance: any;\n    @HostBinding('attr.id') _id: string;\n    constructor(\n        private _differs: KeyValueDiffers,\n        public ele: ElementRef,\n        public render: Renderer2\n    ) {\n        this.props = {\n            children: []\n        } as P;\n        this.state = {} as T;\n    }\n\n    createGuid() {\n        return guid();\n    }\n\n    getNative() {\n        return this.ele.nativeElement;\n    }\n\n    setState(state: T): void {\n        this._stateDiffer = this._differs.find(this.state).create();\n        this.state = state;\n        this.ngDoCheck();\n    }\n\n    setProps(props: P): void {\n        this._propsDiffer = this._differs.find(this.props).create();\n        this.props = props;\n        this.ngDoCheck();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if ('props' in changes) {\n            const value = changes['props'].currentValue;\n            this._propsDiffer = this._differs.find(value).create();\n        }\n        if ('state' in changes) {\n            const value = changes['state'].currentValue;\n            this._stateDiffer = this._differs.find(value).create();\n        }\n    }\n\n    ngDoCheck(): void {\n        if (this._propsDiffer) {\n            const changes = this._propsDiffer.diff(this.props);\n            if (changes) this._propsChanges(changes);\n        }\n        if (this._stateDiffer) {\n            const changes = this._stateDiffer.diff(this.state);\n            if (changes) this._stateChanges(changes);\n        }\n    }\n\n    setClass(classObj: { [key: string]: boolean }, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (ele) {\n            return '';\n        }\n        for (const key in classObj) {\n            if (classObj[key]) {\n                this.render.addClass(ele, key);\n            } else {\n                this.render.removeClass(ele, key);\n            }\n        }\n    }\n\n    setStyle(styleObj: { [key: string]: string }, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (ele) {\n            return '';\n        }\n        for (const key in styleObj) {\n            // 检查单位\n            let [name, unit] = key.split('.');\n            let value = styleObj[key];\n            value = value != null && unit ? `${value}${unit}` : value;\n            name = this.humpToHyphen(name);\n            this.render.setStyle(ele, name, value);\n        }\n    }\n\n    removeStyle(styles: any, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (type(styles) == 'array' && type(styles) !== 'undefined') {\n            styles.map(key => {\n                this.render.removeStyle(ele, key);\n            });\n        } else {\n            this.render.removeStyle(ele, styles);\n        }\n    }\n    // 下划线转驼峰\n    hyphenToHump(str: string) {\n        const preg = new RegExp('//-(/w)/g');\n        return str.replace(preg, (all, letter) => {\n            return letter.toUpperCase();\n        });\n    }\n    // 驼峰转下划线\n    humpToHyphen(str: string) {\n        return str.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n    }\n\n    addStyle(name: string, value: string, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (ele) {\n            return '';\n        }\n        this.render.setStyle(ele, name, value);\n    }\n\n    addClass(name: string, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (ele) {\n            return '';\n        }\n        this.render.addClass(this.ele.nativeElement, name);\n    }\n\n    setAttribute(classObj: { [key: string]: any }, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (ele) {\n            return '';\n        }\n        for (const key in classObj) {\n            if (type(classObj[key]) === 'boolean') {\n                if (classObj[key]) {\n                    this.render.setAttribute(ele, key, 'true');\n                } else {\n                    this.render.removeAttribute(ele, key);\n                }\n            } else {\n                this.render.setAttribute(ele, key, classObj[key]);\n            }\n        }\n    }\n\n    removeClass(name: string, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (ele) {\n            return '';\n        }\n        this.render.removeClass(ele, name);\n    }\n\n    private _stateChanges(changes: KeyValueChanges<string, T>) {\n        this.onStateChange(changes);\n        this.stateChange.emit(this.state);\n    }\n    private _propsChanges(changes) {\n        this.onPropsChange(changes);\n        this.propsChange.emit(this.props);\n    }\n    abstract onPropsChange(changes: KeyValueChanges<string, P>): void;\n    abstract onStateChange(changes: KeyValueChanges<string, T>): void;\n}\n"
  ],
  "names": [
    "Input",
    "KeyValueDiffers",
    "TemplateRef",
    "ViewContainerRef",
    "Directive",
    "HostBinding",
    "EventEmitter"
  ],
  "mappings": ";;;;;;;;;;;;;;KICA,CAAA;;;IASA,IAAA,CAAA,GAAA,OAAA,MAAA,KAAA,UAAA,IAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAAA,CAAA;;;;QACA,OAAA,CAAA,CAAA,KAAA,KAAA,CAAA,IAAA,CAAA,EAAA,GAAA,CAAA,KAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,EAAA,EAAA,IAAA,EAAA,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA;KACA;IACA,OAAA,KAAA,EAAA,EAAA,CAAA,GAAA,EAAA,KAAA,EAAA,KAAA,EAAA,CAAA,EAAA;YACY;QACZ,IAAA;;;;;IACA,OAAA,EAAA,CAAc;CACd,CAAA;AACA;;;;;;;;;;;IA8CI,SAAJ,EAAA,GAAA;QACgB,OAAhB,CAAA,CAAA,CAAA,CAAA,GAAA,IAAA,CAAA,MAAA,EAAA,IAAA,OAAA,IAAA,CAAA,EAAA,QAAA,CAAA,EAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA;KACA;IACA,QAAA,EAAA,EAAA,GAAqB,EAArB,EAAA,GAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,EAAA,EAAA,GAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,GAAA,EAAA,EAAA,EAAA;CA1BA;;;;;AA8BA,SAAc,IAAd,CAAA,GAAA,EAAA;IACA,OAAA,OAAkB,GAAlB,CAAA;CACA;;;;;;;;;;;;;;;;;;QAvBA,IAAY,CAAC,WAAb,GAAA,IAAAM,iBAAA,EAAA,CAAA;QACQ,IAAI,CAAC,OAAO,GAApB,IAA2BA,iBAA3B,EAAA,CAAA;;;;;;IAKI,MAAJ,CAAA,cAAA,CAAA,cAAA,CAAA,SAAA,EAAA,QAAA,EAAA;;;;;;SAGA;QACQ,UAAR,EAAoB,IAAI;QACxB,YAAA,EAAA,IAAA;;;;;;QAgBA,GAAA,EAAA,YAAA;;;;QAEA,YAAA,EAAA,IAAA;KACA,CAAA,CAAA;;;;;;IAGI,cAAiB,CAArB,SAAA,CAAA,QAAA,GAAA,UAAA,CAAA,EAAA;QACQ,IAAI,CAAC,OAAb,CAAA,IAAyB,CAAzB,CAAA,CAA4B,CAA5B;KACA,CAAA;IACA,MAAA,CAAA,cAAyB,CAAzB,cAAA,CAAA,SAAA,EAAA,MAAA,EAAA;;;;;;SAGA;;;;;;;;;QAMA,YAAA,EAAA,IAAA;KACA,CAAA,CAAA;;;;IAIA,cAAA,CAAmB,SAAnB,CAAA,UAAA,GAAA,YAAA;QACA,OAAA,IAAA,EAAA,CAAA;KACA,CAAA;;;;;;KAIA,CAAA;;;;;IAIA,cAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAA,KAAA,EAAA;QACQ,IAAI,CAAZ,YAAA,GAAA,IAAA,CAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,MAAA,EAAA,CAAA;QACA,IAAY,CAAZ,KAAA,GAAA,KAAA,CAAA;QACA,IAAY,CAAZ,SAAA,EAAA,CAAA;KAAA,CAAA;;;;;;;;QAIA,IAAY,CAAC,SAAb,EAAA,CAAA;KACA,CAAA;;;;;IAKA,cAAA,CAAA,SAA4B,CAAC,WAA7B,GAAA,UAAA,OAAA,EAAA;QACA,IAAA,OAAA,IAAA,OAAA,EAAA;YACA,qBAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA,CAAA,YAAA,CAAA;YAAA,IAAA,CAAmB,YAAnB,GAAA,IAAA,CAAA,QAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,MAAA,EAAA,CAAA;SACA;QACA,IAAA,OAAA,IAAA,OAAA,EAAA;YACA,qBAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA,CAAA,YAAA,CAAA;YACA,IAAA,CAAA,YAAA,GAAA,IAAA,CAAA,QAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,MAAA,EAAA,CAAA;;;;;;IAEI,cAAJ,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;QACQ,IAAR,IAAA,CAAiB,YAAjB,EAAA;YACY,qBAAZ,OAAA,GAAA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;YACY,IAAZ,OAAA;gBACA,IAAA,CAAA,aAAA,CAAA,OAAA,CAAA,CAAA;SACA;;YAEY,qBAAZ,OAAwC,GAAxC,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;YACY,IAAZ,OAAA;gBACA,IAAoB,CAApB,aAAA,CAAA,OAAA,CAAA,CAA4C;SAC5C;KACA,CAAA;;;;;;;;QAIA,IAAA,GAAe,EAAf;YACA,OAAA,EAAqB,CAArB;SACA;QACA,KAAA,qBAAA,GAAA,IAAA,QAAA,EAAA;YACA,IAAgB,QAAhB,CAAA,GAA4B,CAA5B,EAAA;gBACA,IAAA,CAAA,MAAA,CAAA,QAAA,CAAA,GAAA,EAAA,GAAA,CAAA,CAAA;aACA;iBAAA;gBACgB,IAAhB,CAAA,MAAA,CAAA,WAAuC,CAAvC,GAAA,EAAA,GAAgD,CAAC,CAAjD;aACA;SACA;;;;;;;IAIA,cAAkB,CAAC,SAAnB,CAAA,QAAqC,GAArC,UAAA,QAAA,EAAA,GAAA,EAAA;QACA,GAAA,GAAA,GAAA,IAAA,IAAyB,CAAC,SAA1B,EAAqC,CAArC;QACA,IAAA,GAAA,EAAA;YACA,OAAA,EAAA,CAAA;;;;;YAEA,qBAAA,KAAA,GAAA,QAAA,CAAA,GAAA,CAAA,CAAA;YACA,KAAA,GAAA,KAAA,IAAA,IAAA,IAAqC,IAArC,GAA4C,EAAE,GAA9C,KAAA,GAAyD,IAAzD,GAAA,KAAA,CAAA;YACA,IAAA,GAAA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,CAAA;;;;;;;;;IAIA,cAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAA,MAAA,EAAA,GAAA,EAAA;QACA,IAAY,KAAZ,GAAA,IAAA,CAAA;QACA,GAAA,GAAA,GAAA,IAAA,IAAA,CAAA,SAAA,EAAA,CAAA;QACQ,IAAI,IAAZ,CAAA,MAAA,CAAA,IAA4B,OAA5B,IAAA,IAAA,CAAA,MAAA,CAAA,KAAA,WAAA,EAAA;YACA,MAAA,CAAA,GAAA,CAAA,UAAA,GAAA,EAAA;;;;;;SAEA;KACA,CAAA;;;;;IAKA,cAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAA,GAAA,EAAA;;;;;;;;;;IAMA,cAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAA,GAAA,EAAA;QACQ,OAAR,GAAA,CAAA,OAAA,CAAA,UAAA,EAAsB,KAAtB,CAAA,CAAA,WAAA,EAAA,CAAA;KACA,CAAA;;;;;;;IAMA,cAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAA,IAAA,EAAA,KAAA,EAAA,GAAA,EAAA;QAAA,GAAA,GAAA,GAAmB,IAAnB,IAAA,CAAA,SAAA,EAAA,CAAA;QACA,IAAA,GAAA,EAAA;YACA,OAAA,EAAA,CAAA;SACS;QACT,IAAA,CAAA,MAAA,CAAA,QAAA,CAAA,GAAA,EAAA,IAAA,EAAA,KAAA,CAAA,CAAA;;;;;;;IAGA,cAAA,CAAA,SAAA,CAAA,QAAqC,GAArC,UAAA,IAAA,EAAA,GAAA,EAAA;QACQ,GAAR,GAAA,GAAiB,IAAjB,IAAA,CAAA,SAAA,EAAA,CAAA;QACA,IAAY,GAAZ,EAAA;YACA,OAAA,EAAA,CAAA;SACA;QACA,IAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,GAAA,CAAA,aAAA,EAAA,IAAA,CAAA,CAAA;;;;;;;IAIA,cAAA,CAAA,SAAA,CAA6B,YAAY,GAAzC,UAAA,QAAA,EAAA,GAAA,EAAA;;;;;;YAEA,IAAA,IAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,KAAA,SAAA,EAAA;gBACA,IAAA,QAAA,CAAA,GAAA,CAAA,EAAmC;oBACnC,IAAwB,CAAC,MAAzB,CAAA,YAAA,CAAA,GAAA,EAAA,GAAA,EAAA,MAAA,CAAA,CAAA;;;;iBAvLA;aAIA;iBAIA;gBACA,IAAA,CAAA,MAAA,CAAK,YAAL,CAAA,GAAA,EAAA,GAAA,EAAA,QAAA,CAAA,GAAA,CAAA,CAAA,CAAA;aAEA;SAKA;KAcA,CAAA;;;;;;;QD/DA,GAAA,GAAA,GAAA,IAAA,IAAA,CAAA,SAAA,EAAA,CAAA;;;SAGA;;;;;;;IAEI,cAAJ,CAAA,SAEuB,CAFvB,aAAA,GAAA,UAAA,OAAA,EAAA;QAMQ,IAAR,CAAa,aAAa,CAA1B,OAAkC,CAAC,CAAC;QAFrB,IAAf,CAAA,WAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;KAGA,CAAA;;;;;IAGI,cAAJ,CAAA,SAAA,CAAA,aAAA,GAAA,UAAA,OAAA,EAAA;QACQ,IAAR,CAAa,aAAb,CAAA,OAAA,CAAA,CAAmB;QACnB,IAAY,CAAZ,WAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAA0C;KAC1C,CAAA;IACA,OAAA,cAAA,CAAA;CACA,EAAA,CAAA,CAAA;AACA,cAAA,CAAA,cAAA,GAAA;IACA,OAAW,EAAX,CAAA,EAAA,IAAA,EAAAN,UAAA,EAAA,EAAA;IACA,OAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,UAAA,EAAA,EAAA;;;;;IAEI,KAAJ,EAAA,CAAA,EAAA,IAAkB,EAAlBK,gBAAA,EAAA,IAAA,EAAA,CAAA,SAAA,EAAA,EAAA,EAAA;CACA,CAAA;;;;;;;;ADzBA,IAAA,qBAAA,kBAAA,UAAA,MAAA,EAAA;;;;;;;;;;QAcA,KAAA,CAAA,EACe,GADf,EAAA,CAAA;QACe,KAAf,CAAA,IAAA,GAAA,KAAA,CAAA,EAAA,CAAA,KAAA,CAAA,EAAA,CAAA,CAAA;QACe,OAAf,KAAsB,CAAtB;KACA;;;;;;;;;QAQA,IAAA,CAAA,IAAA,CAAA,YAAA,CAAA,SAAA,CAAA,UAAA,GAAA,EAAA;YACA,KAAA,CAAA,KAAA,CAAA,OAAA,CAAA,GAAA,GAAA,CAAA;YACA,KAAA,CAAA,aAAA,CAAA,GAAA,CAAA,CAAA;SACA,CAAA,CAAA;KAJA,CAAA;;;;;;QAOQ,IAAR,CAAA,QAAqB,CAAC,GAAtB,EAA4D,IAA5D,CAAA,QAAA,CAAA,GAAA,CAAA,aAAA,CAAA,CAAA;KACA,CAAA;IACA,OAAA,qBAAA,CAAA;CACA,CAAA,cAAA,CAAA,CAAA,CAAA;;;;;;;;AAIA,IAAA,eAAA,kBAAA,YAAA;;;;;;;;;QAMA,IAAA,CAAa,GAAb,GAAA,GAAA,CAAA;KACA;IACA,OAAA,eAAA,CAAA;CACA,EAAA,CAAA,CAAA;AAAA,IAAA,QAAA,kBAAA,YAAmD;;;;;;;QAInD,IAAA,CAAA,cAAA,GAAA,cAAA,CAAA;QACQ,IAAR,CAAA,SAAA,GAAA,SAAA,CAAA;QACQ,IAAR,CAAA,QAAA,GAAA,QAAA,CACkD;QAClD,IAAgB,CAAhB,OAAwB,GAAxB,IAAA,CAAA;KACA;IAKA,MAAA,CAAA,cAAA,CAAA,QAAA,CAAA,SAA+B,EAA/B,eAAA,EAAA;;;;;QAIA,GAAA,EAAiB,UAAjB,KAAA,EAAA;YAAA,IAAA,KAAA,EAAA;gBACoB,IAApB,CAAA,SAAA,GAAA,KAAA,CAA0B;aAC1B;SACA;QAKA,UAAA,EAAA,IAAA;QACA,YAAA,EAAA,IAAA;KACA,CAAA,CAAA;;;;;;;;YAvEqB,IAArB,CAAA,IAAA,CAAA,OAAA,IAAA,KAAA,EAAA;gBADA,IAAA,CAAA,OAAA,GAAA,IAAA,CAAA,QAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,MAAA,EAAA,CAAA;aAKA;;;;;;IAwEA,QAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;;;;;;KACA,CAAA;;;;;IAKA,QAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAA,OAAA,EAAA;;;;;;gBDtFA,qBAAA,KAAA,GAAA,IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,EAAA,QAAA,CAAA,IAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAAA,CAAA;;;;gBAiBgB,KAAhB,CAAA,cAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAAA,CAAA;aACa;iBACb;;;;gBAEA,YAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;;SAEA,CAAA,CAAA;;;;;IAEI,EAAJ,IAAA,EAAAD,cAAA,EAAsC,IAAtC,EAAA,CAAA,EAAA,QAAA,EAAA,oBAAA,EAAA,EAAA,EAAA;CACA,CAAA;;AAEA,QAAQ,CAAR,cAAA,GAAA,YAAA,EAAA,OAAA;IACA,EAAA,IAAA,EAAYD,qBAAZ,GAAA;IACA,EAAA,IAAA,EAAYD,gBAAZ,GAAA;IACA,EAAA,IAAA,EAAAD,oBAA2B,GAAG;CAC9B,CAAA,EAAA,CAAA;AAEA,QAAA,CAAA,cAAA,GAAA;IAMA,UAAA,EAAgB,CAAC,EAAjB,IAAA,EAAAD,UAA8B,EAA9B,EAAA;IACA,eAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,UAAA,EAAA,EAAA;CACA,CAAA;;;;;;;IAtCA,SAAA,eAA0B,CAA1B,MAAA,EAAA,IAAA,EAAA,KAAA,EAAA;;;QASA,IAAA,CAAA,KAAA,GAAA,KAAA,CAAA;KACA;IACA,OAAA,eAAA,CAAA;;;;;;;;;;IDbA,SAAA,oBAAA,CAAA,iBAAA,EAAA;QACA,IAAA,CAAA,gBAAA,GAAA,iBAAA,CAAA;KACA;;;;IAIA,oBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;;KAEA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
}
