{
  "version": 3,
  "file": "ng-react-component.umd.js",
  "sources": [
    "ng://ng-react-component/common/common.module.ts",
    "ng://ng-react-component/common/ng-component.ts",
    "ng://ng-react-component/common/ng-each-of.ts",
    "ng://ng-react-component/react.component.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { NgEachOf } from './ng-each-of';\nimport { NgComponentDirective } from './ng-component';\n@NgModule({\n    exports: [\n        NgEachOf,\n        NgComponentDirective\n    ],\n    declarations: [\n        NgEachOf,\n        NgComponentDirective\n    ]\n})\nexport class ReactCommonModule { }\n",
    "\nimport {\n    ComponentFactoryResolver, ComponentRef, Directive,\n    Injector, Input, NgModuleFactory, NgModuleRef,\n    OnChanges, OnDestroy, SimpleChanges, StaticProvider,\n    Type, ViewContainerRef, Output, OnInit, ComponentFactory\n} from '@angular/core';\n\n@Directive({ selector: '[ngComponent]' })\nexport class NgComponentDirective implements OnInit {\n    viewContainerRef: any;\n    componentRef: ComponentRef<any>;\n    moduleRef: any;\n\n    @Input() ngComponent: any;\n    @Input() ngComponentInput: any;\n    @Output() Output: any;\n\n    constructor(_viewContainerRef: ViewContainerRef) {\n        this.viewContainerRef = _viewContainerRef;\n    }\n\n    ngOnInit() {\n        // console.log(this.ngComponentInput);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.viewContainerRef.clear();\n        this.componentRef = null;\n        if (this.ngComponent) {\n            const elInjector = this.viewContainerRef.parentInjector;\n            const componentFactoryResolver: ComponentFactoryResolver = this.moduleRef ? this.moduleRef.componentFactoryResolver :\n                elInjector.get(ComponentFactoryResolver);\n            const componentFactory: ComponentFactory<any> =\n                componentFactoryResolver.resolveComponentFactory(this.ngComponent);\n            this.componentRef = this.viewContainerRef.createComponent(\n                componentFactory,\n                this.viewContainerRef.length,\n                elInjector,\n                this.ngComponent\n            );\n            this.componentRef.instance.props = this.ngComponentInput;\n        }\n    }\n}\n",
    "\nimport {\n    ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input,\n    IterableChangeRecord, IterableChanges, IterableDiffer,\n    IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef,\n    TrackByFunction, ViewContainerRef, forwardRef, isDevMode\n} from '@angular/core';\nimport {\n    KeyValueDiffer, KeyValueChanges, KeyValueChangeRecord,\n    KeyValueDifferFactory, KeyValueDiffers\n} from '@angular/core';\nexport interface EachKeyValue<T> {\n    [key: string]: T;\n}\nexport class NgEachOfContext<T> {\n    constructor(\n        public $implicit: T,\n        public ngForOf: EachKeyValue<T>,\n        public key: string,\n    ) { }\n}\n\n@Directive({ selector: '[ngEach][ngEachOf]' })\nexport class NgEachOf<T> implements DoCheck, OnChanges {\n    @Input() ngEachOf: EachKeyValue<T>;\n    private _differ: KeyValueDiffer<string, T> | null = null;\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        private _template: TemplateRef<NgEachOfContext<T>>,\n        private _differs: KeyValueDiffers\n    ) { }\n    @Input()\n    set ngForTemplate(value: TemplateRef<NgEachOfContext<T>>) {\n        if (value) {\n            this._template = value;\n        }\n    }\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('ngEachOf' in changes) {\n            const value = changes['ngEachOf'].currentValue;\n            if (!this._differ && value) {\n                this._differ = this._differs.find(value).create();\n            }\n        }\n    }\n    ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.ngEachOf);\n            if (changes) this._applyChanges(changes);\n        }\n    }\n\n    private _applyChanges(changes: KeyValueChanges<string, T>) {\n        const insertTuples: RecordViewTuple<T>[] = [];\n        changes.forEachItem(\n            (item: KeyValueChangeRecord<string, T>) => {\n                if (item.previousValue == null) {\n                    const view = this._viewContainer.createEmbeddedView(\n                        this._template,\n                        new NgEachOfContext<T>(item.currentValue, this.ngEachOf, item.key),\n                        parseInt(item.key, 16)\n                    );\n                    const tuple = new RecordViewTuple<T>(item, view, parseInt(item.key, 16));\n                    insertTuples.push(tuple);\n                } else if (item.currentValue == null) {\n                    this._viewContainer.remove(parseInt(item.key, 16));\n                } else {\n                    const view = this._viewContainer.get(parseInt(item.key, 16))!;\n                    this._viewContainer.move(view, parseInt(item.key, 16));\n                    const tuple = new RecordViewTuple(\n                        item.currentValue,\n                        <EmbeddedViewRef<NgEachOfContext<T>>>view,\n                        parseInt(item.key, 16)\n                    );\n                    insertTuples.push(tuple);\n                }\n            }\n        );\n    }\n}\n\nclass RecordViewTuple<T> {\n    constructor(\n        public record: any,\n        public view: EmbeddedViewRef<NgEachOfContext<T>>,\n        public index: number\n    ) { }\n}\n",
    "\nimport { EventEmitter, NgZone, Input, Output, KeyValueDiffer } from '@angular/core';\nimport { OnChanges, KeyValueChanges, DoCheck, KeyValueDiffers, SimpleChanges } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/share';\n\nfunction defaults(target: any, options: any): KeyValue {\n    if (target === null || (typeof target !== 'object' && typeof target !== 'function')) {\n        target = {};\n    }\n    if (options) {\n        target = { ...target, ...options };\n    }\n    return target;\n}\nexport interface KeyValue {\n    [key: string]: any;\n}\nexport abstract class ReactComponent<P extends KeyValue, T extends KeyValue> implements OnChanges, DoCheck {\n    @Input() state: T;\n    get state$(): Observable<KeyValue> {\n        return this.stateChange.share();\n    }\n    @Input() props: P;\n    get props$(): Observable<P> {\n        return this.propsChange.share();\n    }\n    @Output() stateChange: EventEmitter<T> = new EventEmitter();\n    @Output() propsChange: EventEmitter<P> = new EventEmitter();\n    private _stateDiffer: KeyValueDiffer<string, any>;\n    private _propsDiffer: KeyValueDiffer<string, any>;\n    constructor(\n        private _differs: KeyValueDiffers\n    ) {\n        this.props = {} as P;\n        this.state = {} as T;\n    }\n\n    setState(state: T): void {\n        this._stateDiffer = this._differs.find(this.state).create();\n        this.state = defaults(this.state, state) as T;\n        this.ngDoCheck();\n    }\n\n    setProps(props: P): void {\n        this._propsDiffer = this._differs.find(this.props).create();\n        this.props = defaults(this.props, props) as P;\n        this.ngDoCheck();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if ('props' in changes) {\n            const value = changes['props'].currentValue;\n            this._propsDiffer = this._differs.find(value).create();\n        }\n        if ('state' in changes) {\n            const value = changes['state'].currentValue;\n            this._stateDiffer = this._differs.find(value).create();\n        }\n    }\n\n    ngDoCheck(): void {\n        if (this._propsDiffer) {\n            const changes = this._propsDiffer.diff(this.props);\n            if (changes) this._propsChanges(changes);\n        }\n        if (this._stateDiffer) {\n            const changes = this._stateDiffer.diff(this.state);\n            if (changes) this._stateChanges(changes);\n        }\n    }\n\n    private _stateChanges(changes) {\n        this.onStateChange(changes);\n        this.stateChange.emit(this.state);\n    }\n    private _propsChanges(changes) {\n        this.onPropsChange(changes);\n        this.propsChange.emit(this.props);\n    }\n    abstract onPropsChange(changes: KeyValueChanges<string, P>): void;\n    abstract onStateChange(changes: KeyValueChanges<string, T>): void;\n}\n"
  ],
  "names": [
    "Output",
    "Input",
    "ComponentFactoryResolver",
    "KeyValueDiffers",
    "Directive",
    "EventEmitter"
  ],
  "mappings": "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"
}
