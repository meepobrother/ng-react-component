{
  "version": 3,
  "file": "ng-react-component.umd.js",
  "sources": [
    "ng://ng-react-component/common/common.module.ts",
    "ng://ng-react-component/common/ng-component.ts",
    "ng://ng-react-component/common/ng-each-of.ts",
    "ng://ng-react-component/react.component.ts"
  ],
  "sourcesContent": [
    "import { NgModule } from '@angular/core';\nimport { NgEachOf } from './ng-each-of';\nimport { NgComponentDirective } from './ng-component';\n@NgModule({\n    exports: [\n        NgEachOf,\n        NgComponentDirective\n    ],\n    declarations: [\n        NgEachOf,\n        NgComponentDirective\n    ]\n})\nexport class ReactCommonModule { }\n",
    "\nimport {\n    ComponentFactoryResolver, ComponentRef, Directive,\n    Injector, Input, NgModuleFactory, NgModuleRef,\n    OnChanges, OnDestroy, SimpleChanges, StaticProvider,\n    Type, ViewContainerRef, Output, OnInit, ComponentFactory\n} from '@angular/core';\n\n@Directive({ selector: '[ngComponent]' })\nexport class NgComponentDirective implements OnInit {\n    viewContainerRef: any;\n    componentRef: ComponentRef<any>;\n    moduleRef: any;\n\n    @Input() ngComponent: any;\n    @Input() ngComponentInput: any;\n    @Output() Output: any;\n\n    constructor(_viewContainerRef: ViewContainerRef) {\n        this.viewContainerRef = _viewContainerRef;\n    }\n\n    ngOnInit() {\n        // console.log(this.ngComponentInput);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.viewContainerRef.clear();\n        this.componentRef = null;\n        if (this.ngComponent) {\n            const elInjector = this.viewContainerRef.parentInjector;\n            const componentFactoryResolver: ComponentFactoryResolver = this.moduleRef ? this.moduleRef.componentFactoryResolver :\n                elInjector.get(ComponentFactoryResolver);\n            const componentFactory: ComponentFactory<any> =\n                componentFactoryResolver.resolveComponentFactory(this.ngComponent);\n            this.componentRef = this.viewContainerRef.createComponent(\n                componentFactory,\n                this.viewContainerRef.length,\n                elInjector,\n                this.ngComponent\n            );\n            this.componentRef.instance.props = this.ngComponentInput;\n        }\n    }\n}\n",
    "\nimport {\n    ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input,\n    IterableChangeRecord, IterableChanges, IterableDiffer,\n    IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef,\n    TrackByFunction, ViewContainerRef, forwardRef, isDevMode\n} from '@angular/core';\nimport {\n    KeyValueDiffer, KeyValueChanges, KeyValueChangeRecord,\n    KeyValueDifferFactory, KeyValueDiffers\n} from '@angular/core';\nexport interface EachKeyValue<T> {\n    [key: string]: T;\n}\nexport class NgEachOfContext<T> {\n    constructor(\n        public $implicit: T,\n        public ngForOf: EachKeyValue<T>,\n        public key: string,\n    ) { }\n}\n\n@Directive({ selector: '[ngEach][ngEachOf]' })\nexport class NgEachOf<T> implements DoCheck, OnChanges {\n    @Input() ngEachOf: EachKeyValue<T>;\n    private _differ: KeyValueDiffer<string, T> | null = null;\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        private _template: TemplateRef<NgEachOfContext<T>>,\n        private _differs: KeyValueDiffers\n    ) { }\n    @Input()\n    set ngForTemplate(value: TemplateRef<NgEachOfContext<T>>) {\n        if (value) {\n            this._template = value;\n        }\n    }\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('ngEachOf' in changes) {\n            const value = changes['ngEachOf'].currentValue;\n            if (!this._differ && value) {\n                this._differ = this._differs.find(value).create();\n            }\n        }\n    }\n    ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.ngEachOf);\n            if (changes) this._applyChanges(changes);\n        }\n    }\n\n    private _applyChanges(changes: KeyValueChanges<string, T>) {\n        const insertTuples: RecordViewTuple<T>[] = [];\n        changes.forEachItem(\n            (item: KeyValueChangeRecord<string, T>) => {\n                if (item.previousValue == null) {\n                    const view = this._viewContainer.createEmbeddedView(\n                        this._template,\n                        new NgEachOfContext<T>(item.currentValue, this.ngEachOf, item.key),\n                        parseInt(item.key, 16)\n                    );\n                    const tuple = new RecordViewTuple<T>(item, view, parseInt(item.key, 16));\n                    insertTuples.push(tuple);\n                } else if (item.currentValue == null) {\n                    this._viewContainer.remove(parseInt(item.key, 16));\n                } else {\n                    const view = this._viewContainer.get(parseInt(item.key, 16))!;\n                    this._viewContainer.move(view, parseInt(item.key, 16));\n                    const tuple = new RecordViewTuple(\n                        item.currentValue,\n                        <EmbeddedViewRef<NgEachOfContext<T>>>view,\n                        parseInt(item.key, 16)\n                    );\n                    insertTuples.push(tuple);\n                }\n            }\n        );\n    }\n}\n\nclass RecordViewTuple<T> {\n    constructor(\n        public record: any,\n        public view: EmbeddedViewRef<NgEachOfContext<T>>,\n        public index: number\n    ) { }\n}\n",
    "\nimport {\n    EventEmitter, NgZone, Input, Output,\n    KeyValueDiffer, HostListener, HostBinding, ElementRef,\n    Renderer2\n} from '@angular/core';\nimport { OnChanges, KeyValueChanges, DoCheck, KeyValueDiffers, SimpleChanges } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/share';\nimport { guid } from 'meepo-common';\nfunction type(val): string {\n    return typeof val;\n}\nfunction defaults(target: any, options: any): KeyValue {\n    if (target === null || (typeof target !== 'object' && typeof target !== 'function')) {\n        target = {};\n    }\n    if (options) {\n        target = { ...target, ...options };\n    }\n    return target;\n}\nexport interface KeyValue {\n    [key: string]: any;\n    children: any[];\n}\nexport abstract class ReactComponent<P extends KeyValue, T extends KeyValue> implements OnChanges, DoCheck {\n    @Input() state: T;\n    get state$(): Observable<KeyValue> {\n        return this.stateChange.share();\n    }\n    @Input() props: P;\n    get props$(): Observable<P> {\n        return this.propsChange.share();\n    }\n    @Output() stateChange: EventEmitter<T> = new EventEmitter();\n    @Output() propsChange: EventEmitter<P> = new EventEmitter();\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n    /**\n     * 监听click事件\n     * @param e \n     */\n    @HostListener('click', ['$event'])\n    _onClick(e: Event) {\n        this.onClick.emit(e);\n    }\n    private _stateDiffer: KeyValueDiffer<string, any>;\n    private _propsDiffer: KeyValueDiffer<string, any>;\n    guid: string = guid();\n    constructor(\n        private _differs: KeyValueDiffers,\n        public ele: ElementRef,\n        public render: Renderer2\n    ) {\n        this.props = {\n            children: []\n        } as P;\n        this.state = {} as T;\n    }\n\n    setState(state: T): void {\n        this._stateDiffer = this._differs.find(this.state).create();\n        this.state = defaults(this.state, state) as T;\n        this.ngDoCheck();\n    }\n\n    setProps(props: P): void {\n        this._propsDiffer = this._differs.find(this.props).create();\n        this.props = defaults(this.props, props) as P;\n        this.ngDoCheck();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if ('props' in changes) {\n            const value = changes['props'].currentValue;\n            this._propsDiffer = this._differs.find(value).create();\n        }\n        if ('state' in changes) {\n            const value = changes['state'].currentValue;\n            this._stateDiffer = this._differs.find(value).create();\n        }\n    }\n\n    ngDoCheck(): void {\n        if (this._propsDiffer) {\n            const changes = this._propsDiffer.diff(this.props);\n            if (changes) this._propsChanges(changes);\n        }\n        if (this._stateDiffer) {\n            const changes = this._stateDiffer.diff(this.state);\n            if (changes) this._stateChanges(changes);\n        }\n    }\n\n    setClass(classObj: { [key: string]: boolean }) {\n        for (const key in classObj) {\n            if (classObj[key]) {\n                this.render.addClass(this.ele.nativeElement, key);\n            } else {\n                this.render.removeClass(this.ele.nativeElement, key);\n            }\n        }\n    }\n\n    setStyle(styleObj: { [key: string]: string }) {\n        for (const key in styleObj) {\n            this.render.setStyle(this.ele.nativeElement, key, styleObj[key]);\n        }\n    }\n\n    removeStyle(styles: any) {\n        if (type(styles) == 'array') {\n            styles.map(key => {\n                this.render.removeStyle(this.ele.nativeElement, key);\n            });\n        } else {\n            this.render.removeStyle(this.ele.nativeElement, styles);\n        }\n    }\n\n    addStyle(name: string, value: string) {\n        this.render.setStyle(this.ele.nativeElement, name, value);\n    }\n\n    addClass(name: string) {\n        this.render.addClass(this.ele.nativeElement, name);\n    }\n\n    setAttribute(classObj: { [key: string]: any }) {\n        for (const key in classObj) {\n            if (type(classObj[key]) === 'boolean') {\n                if (classObj[key]) {\n                    this.render.setAttribute(this.ele.nativeElement, key, 'true');\n                } else {\n                    this.render.removeAttribute(this.ele.nativeElement, key);\n                }\n            } else {\n                this.render.setAttribute(this.ele.nativeElement, key, classObj[key]);\n            }\n        }\n    }\n\n    removeClass(name: string) {\n        this.render.removeClass(this.ele.nativeElement, name);\n    }\n\n    private _stateChanges(changes: KeyValueChanges<string, T>) {\n        this.onStateChange(changes);\n        this.stateChange.emit(this.state);\n    }\n    private _propsChanges(changes) {\n        this.onPropsChange(changes);\n        this.propsChange.emit(this.props);\n    }\n    abstract onPropsChange(changes: KeyValueChanges<string, P>): void;\n    abstract onStateChange(changes: KeyValueChanges<string, T>): void;\n}\n"
  ],
  "names": [
    "Output",
    "Input",
    "KeyValueDiffers",
    "TemplateRef",
    "guid",
    "EventEmitter"
  ],
  "mappings": ";;;;;;;;;;;;;;;IGUA,OAAA,OAAA,GAAA,CAAA;CACA;;;;;;;IAEA,IAAA,MAAA,KAAA,IAAA,KAAA,OAAA,MAAA,KAAA,QAAA,IAAA,OAAA,MAAA,KAAA,UAAA,CAAA,EAAA;QACQ,MAAM,GAAd,EAAmB,CAAnB;KACA;IACA,IAAA,OAAA,EAAA;QACQ,MAAR,GAAiB,MAAjB,CAAA,MAAA,CAAA,EAAA,EAAA,MAAA,EAAA,OAAA,CAAA,CAAA;KACA;IACA,OAAA,MAAA,CAAA;CACA;;;;;;;;;;;;;;;QA8BA,IAAA,CAAA,GACgB,GADhB,GAAA,CAAA;QACgB,IAAhB,CAAA,MAAA,GAAA,MAAA,CAAA;QACe,IAAf,CAAA,WAAA,GAAA,IAAAK,iBAAA,EAAA,CAAA;QACe,IAAf,CAAA,WAAA,GAAA,IAAAA,iBAAA,EAAA,CAAA;QAlBA,IAAA,CAAA,OAAA,GAAA,IAA6CA,iBAA7C,EAAA,CAAA;QACA,IAAA,CAAA,IAAA,GAAAD,gBAAA,EAAA,CAA6C;QAE7C,IAAA,CAAA,KAAA,qBAA2D;YAW3D,QAAmB,EAAnB,EAAuB;SAMvB,CAAA,CAAA;QACA,IAAY,CAAZ,KAAA,qBAAA,EAAA,CAAA,CAAA;KACA;IACA,MAAA,CAAA,cAAA,CAAA,cAAA,CAA4B,SAA5B,EAAA,QAAA,EAAA;;;;;YA9BA,OAAA,IAAA,CAAA,WAAA,CAAA,KAAA,EAAA,CAAA;SACA;QACA,UAAA,EAAA,IAAA;;;;;;;;;;;;KAcA,CAAA,CAAA;;;;;;;QAiBA,IAAY,CAAC,OAAb,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;KACA,CAAA;;;;;;;;QAKA,IAAY,CAAC,SAAb,EAAA,CAAA;KACA,CAAA;;;;;;;;QAKA,IAAA,CAAA,SAAA,EAAA,CAAA;KACA,CAAA;;;;;IAKA,cAAA,CAAA,SAAA,CAAA,WAAuB,GAAG,UAA1B,OAA2C,EAA3C;QACA,IAAY,OAAZ,IAAA,OAAA,EAAgC;YAChC,qBAAA,KAAA,GAAA,OAAA,CAAA,OAAA,CAAA,CAAA,YAAA,CAAA;YACA,IAAA,CAAA,YAAA,GAAA,IAAA,CAAA,QAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,MAAA,EAAA,CAAA;;;;YAEA,IAAA,CAAA,YAAA,GAAA,IAAA,CAAA,QAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,MAAA,EAAA,CAAA;SACA;KACA,CAAA;;;;IAGA,cAAA,CAAA,SAAA,CAA6B,SAA7B,GAAA,YAAA;QACA,IAAY,IAAZ,CAAA,YAAA,EAAA;YACY,qBAAZ,OAAA,GAAA,IAAA,CAAA,YAAA,CAAA,IAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;YAAA,IAAyB,OAAzB;gBACA,IAAA,CAAA,aAAA,CAAA,OAAA,CAAA,CAAA;SACA;;;;;SAEA;KACA,CAAA;;;;;IAIA,cAAA,CAAA,SAA4B,CAA5B,QAAA,GAAwC,UAAxC,QAAA,EAAA;QACA,KAAa,qBAAb,GAAA,IAAA,QAAA,EAAA;YACA,IAAA,QAAA,CAAA,GAAA,CAAA,EAAA;gBACA,IAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,GAAA,CAAA,aAAA,EAAA,GAAA,CAAA,CAAA;;;;;SAEA;KACA,CAAA;;;;;;;;SAKA;KACA,CAAA;;;;;IAIA,cAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAA,MAAA,EAAA;QACA,IAAY,KAAK,GAAjB,IAAwB,CAAxB;QACA,IAAA,IAAA,CAAA,MAAA,CAAA,IAAA,OAAA,EAAA;YACA,MAAA,CAAA,GAAA,CAAA,UAAA,GAAA,EAAA;;;;;;SAEA;KACA,CAAA;;;;;;IAGI,cAAJ,CAAA,SAAA,CAAA,QAAA,GAAA,UAAA,IAAA,EAAA,KAAA,EAAA;QACQ,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,IAAI,EAAE,KAA3D,CAAA,CAAA;KACK,CAAL;;;;;IAEI,cAAJ,CAAA,SAAA,CAAA,QAAA,GAAA,UAAA,IAAA,EAAA;QACQ,IAAR,CAAa,MAAb,CAAA,QAAA,CAAA,IAAA,CAAA,GAAA,CAAA,aAAkC,EAAE,IAApC,CAAA,CAAA;KACA,CAAA;;;;;IAIA,cAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAA,QAAA,EAAA;QACA,KAAA,qBAAA,GAAA,IAAA,QAAA,EAAA;YACA,IAAA,IAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,KAAA,SAAA,EAAA;gBAAA,IAAA,QAAA,CAAA,GAAA,CAAA,EAAA;oBACoB,IAApB,CAAA,MAAA,CAAA,YAAA,CAA6C,IAAI,CAAC,GAAlD,CAAA,aAAA,EAAA,GAAA,EAAA,MAAA,CAAA,CAAkF;iBAClF;qBACA;oBACA,IAAA,CAAA,MAAA,CAAA,eAAA,CAAA,IAAA,CAAA,GAAA,CAAA,aAAA,EAAA,GAAA,CAAA,CAAA;;;;;aAEA;SACA;KACK,CAAL;;;;;IAEY,cAAc,CAA1B,SAAA,CAAA,WAAA,GAAA,UAAA,IAAA,EAAA;QACQ,IAAI,CAAC,MAAb,CAAA,WAAA,CAAA,IAAoC,CAApC,GAAA,CAAA,aAAA,EAAA,IAAA,CAAA,CAAA;KACA,CAAA;;;;;;QAEA,IAAA,CAAA,aAAA,CAAA,OAAA,CAAA,CAAA;QACQ,IAAI,CAAC,WAAb,CAAA,IAAA,CAAA,IAAkC,CAAC,KAAnC,CAAA,CAAA;KACA,CAAA;;;;;IA1HA,cAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAA,OAAA,EAAA;QAIA,IAAA,CAAA,aAAA,CAAA,OAAW,CAAX,CAAA;QACA,IAAA,CAAA,WAAA,CAAA,IAAA,CAAA,IAAW,CAAX,KAAA,CAAA,CAAA;KAEA,CAAA;IAKA,OAAA,cAAK,CAAL;;;;;;;ID1CA,SAAA,EAAA,CAAA,EAAA,IAAA,EAAAJ,WAAA,EAAA,EAAA;;;;;;;;;;AAcA,IAAI,eAAJ,kBAAA,YAAA;;;;;;IAQA,SAAA,eAAA,CAAA,SAAA,EAAA,OAAA,EAAA,GAAA,EAAA;;;;;;CAGA,EAAA,CAAI,CAAJ;AACA,IAAA,QAAA,kBAAgB,YAAhB;;;;;;;;;QAKQ,IAAR,CAAA,QAAqB,GAArB,QAAA,CAAA;QACQ,IAAI,CAAZ,OAAA,GAAA,IAAA,CAAA;KACA;IACA,MAAA,CAAA,cAAA,CAAA,QAAA,CAAA,SAAA,EAAA,eAAA,EAAA;;;;;;YAEA,IAAgB,KAAhB,EAAsC;gBACtC,IAAA,CAAA,SAAA,GAAiC,KAAjC,CAAA;aACA;SACA;QACA,UAAA,EAAoB,IAApB;QACA,YAAA,EAAA,IAAA;KACA,CAAA,CAAA;;;;;IAEI,QAAJ,CAAa,SAAb,CAAA,WAAA,GAAA,UAAA,OAAA,EAAA;QACQ,IAAI,UAAZ,IAA0B,OAA1B,EAAA;YACY,qBAAZ,KAAA,GAAA,OAAA,CAAgC,UAAhC,CAAA,CAAA,YAAA,CAAA;YACY,IAAI,CAAhB,IAAA,CAAA,OAAA,IAAA,KAAA,EAAA;gBAAyB,IAAI,CAAC,OAA9B,GAAA,IAA4C,CAA5C,QAAqD,CAArD,IAAA,CAAA,KAAA,CAAA,CAAA,MAAA,EAAA,CAAA;aACA;SACA;;;;;IAEY,QAAZ,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;QACQ,IAAR,IAAA,CAAA,OAAA,EAAA;YACA,qBACkD,OADlD,GAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,IAAA,CAAA,QAAA,CAAA,CAAA;YAEgB,IAAI,OAApB;gBACoB,IAApB,CAAA,aAAA,CAAA,OAAA,CAA8B,CAA9B;SAKA;KACA,CAAA;;;;;IAGA,QAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UAAA,OAAA,EAAA;QACA,IAAA,KAAA,GAAA,IAAA,CAAA;QACA,qBAAA,YAA6C,GAA7C,EAAA,CAAmD;QACnD,OAAA,CAAoB,WAApB,CAAA,UAAA,IAAA,EAA+B;YAK/B,IAAoB,IAApB,CAAA,aAAsC,IAAtC,IAAA,EAAA;gBACA,qBAAA,IAAA,GAAA,KAAA,CAAA,cAAA,CAAA,kBAAA,CAAA,KAAA,CAAA,SAAA,EAAA,IAAA,eAAA,CAAA,IAAA,CAAA,YAAA,EAAA,KAAA,CAAA,QAAA,EAAA,IAAA,CAAA,GAAA,CAAA,EAAA,QAAA,CAAA,IAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAAA,CAAA;gBACA,qBAAA,KAAA,GAAA,IAAA,eAAA,CAAA,IAAA,EAAA,IAAA,EAAA,QAAA,CAAA,IAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAAA,CAAA;;;;gBAtDA,KAAU,CAAV,cAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAAA,CAAA;;;;gBAjBA,KAAA,CAAA,cAAA,CAAA,IAAA,CAAA,IAAA,EAAA,QAAA,CAAA,IAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAAA,CAAA;gBADA,qBAAA,KAAA,GAAA,IAAA,eAAA,CAAA,IAAA,CAAA,YAAA,oBAAA,IAAA,GAAA,QAAA,CAAA,IAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAAA,CAAA;gBAKA,YAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA;;;KAeA,CAAA;IAOA,OAAA,QAAA,CAAA;;AAkDA,QAAA,CAAA,UAAA,GAAA;;;;;;IACI,EAAJ,IAAA,EAAAG,gBAAA,GAAA;IACA,EAAA,IAAA,EAAAD,oBAAA,GAAA;CACA,CAAA,EAAA,CAAA;AACA,QAAe,CAAf,cAAA,GAAoB;IACpB,UAAA,EAAA,CAAA,EAAA,IAAA,EAAAD,UAAA,EAAA,EAAA;IACA,eAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,UAAA,EAAA,EAAA;;;;;;;;;;QDrEA,IAAA,CAAA,IAAA,GAAA,IAAA,CAAA;QACQ,IAAI,CAAC,KAAb,GAAA,KAAA,CAAA;KACK;;;;;;;;;;;IAMD,SAAJ,oBAAA,CAAA,iBAAA,EAAA;QACQ,IAAI,CAAC,gBAAgB,GAA7B,iBAAA,CAAA;KACA;;;;IAIA,oBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;;KAGA,CAAA;;;;;;QA3BA,IAAC,CAAD,gBAAA,CAAW,KAAX,EAAA,CAAA;;;;YAHU,qBAAV,wBAAA,GAAA,IAAA,CAAA,SAAA,GAAA,IAAA,CAAA,SAAA,CAAA,wBAAA;;;YASA,IAAA,CAAA,YAAA,GAAA,IAAA,CAAA,gBAAA,CAAA,eAAA,CAAA,gBAAA,EAAA,IAAA,CAAA,gBAAA,CAAA,MAAA,EAAA,UAAA,EAAA,IAAA,CAAA,WAAA,CAAA,CAAA;YACA,IAAA,CAAA,YAAA,CAAA,QAAU,CAAV,KAAA,GAAA,IAAA,CAAA,gBAAA,CAAA;SACA;;;;;;;;;;CDbA,CAAA,EAAA,CAAA;AACA,oBAAA,CAAA,cAAA,GAAA;IACA,aAAA,EAAA,CAAQ,EAAR,IAAA,EAAgBA,UAAhB,EAAA,EAAA;IACA,kBAAA,EAAA,CAAA,EAAA,IAAA,EAAAA,UAAA,EAA4B,EAA5B;IACA,QAAA,EAAA,CAAA,EAAK,IAAL,EAAAD,WAAA,EAAA,EAAA;CACA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
}
