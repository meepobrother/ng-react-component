{
  "version": 3,
  "file": "ng-react-component.umd.min.js",
  "sources": [
    "ng://ng-react-component/react.component.ts",
    "ng://ng-react-component/react.component.setting.ts",
    "ng://ng-react-component/common/ng-each-of.ts",
    "ng://ng-react-component/common/ng-component.ts",
    "ng://ng-react-component/common/common.module.ts"
  ],
  "sourcesContent": [
    "\nimport {\n    EventEmitter, NgZone, Input, Output,\n    KeyValueDiffer, HostListener, HostBinding, ElementRef,\n    Renderer2\n} from '@angular/core';\nimport { OnChanges, KeyValueChanges, DoCheck, KeyValueDiffers, SimpleChanges } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/share';\n\nfunction guid() {\n    function S4() {\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n    }\n    return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\n}\nfunction type(val): string {\n    return typeof val;\n}\nfunction defaults(target: any, options: any): KeyValue {\n    if (target === null || (typeof target !== 'object' && typeof target !== 'function')) {\n        target = {};\n    }\n    if (options) {\n        target = { ...target, ...options };\n    }\n    return target;\n}\nexport interface KeyValue {\n    [key: string]: any;\n    children: any[];\n}\nexport abstract class ReactComponent<P extends KeyValue, T extends KeyValue> implements OnChanges, DoCheck {\n    @Input() state: T;\n    get state$(): Observable<KeyValue> {\n        return this.stateChange.share();\n    }\n    @Input() props: P;\n    get props$(): Observable<P> {\n        return this.propsChange.share();\n    }\n    @Output() stateChange: EventEmitter<T> = new EventEmitter();\n    @Output() propsChange: EventEmitter<P> = new EventEmitter();\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n    /**\n     * 监听click事件\n     * @param e \n     */\n    @HostListener('click', ['$event'])\n    _onClick(e: Event) {\n        this.onClick.emit(e);\n    }\n    private _stateDiffer: KeyValueDiffer<string, any>;\n    private _propsDiffer: KeyValueDiffer<string, any>;\n\n    set guid(val: string) {\n        this._id = val;\n    }\n    get guid() {\n        return this._id;\n    }\n    instance: any;\n    @HostBinding('attr.id') _id: string;\n    constructor(\n        private _differs: KeyValueDiffers,\n        public ele: ElementRef,\n        public render: Renderer2\n    ) {\n        this.props = {\n            children: []\n        } as P;\n        this.state = {} as T;\n    }\n\n    createGuid() {\n        return guid();\n    }\n\n    getNative() {\n        return this.ele.nativeElement;\n    }\n\n    setState(state: T): void {\n        this._stateDiffer = this._differs.find(this.state).create();\n        this.state = state;\n        this.ngDoCheck();\n    }\n\n    setProps(props: P): void {\n        this._propsDiffer = this._differs.find(this.props).create();\n        this.props = props;\n        this.ngDoCheck();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if ('props' in changes) {\n            const value = changes['props'].currentValue;\n            this._propsDiffer = this._differs.find(value).create();\n        }\n        if ('state' in changes) {\n            const value = changes['state'].currentValue;\n            this._stateDiffer = this._differs.find(value).create();\n        }\n    }\n\n    ngDoCheck(): void {\n        if (this._propsDiffer) {\n            const changes = this._propsDiffer.diff(this.props);\n            if (changes) this._propsChanges(changes);\n        }\n        if (this._stateDiffer) {\n            const changes = this._stateDiffer.diff(this.state);\n            if (changes) this._stateChanges(changes);\n        }\n    }\n\n    setClass(classObj: { [key: string]: boolean }, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (ele) {\n            return '';\n        }\n        for (const key in classObj) {\n            if (classObj[key]) {\n                this.render.addClass(ele, key);\n            } else {\n                this.render.removeClass(ele, key);\n            }\n        }\n    }\n\n    setStyle(styleObj: { [key: string]: string }, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (ele) {\n            return '';\n        }\n        for (const key in styleObj) {\n            // 检查单位\n            let [name, unit] = key.split('.');\n            let value = styleObj[key];\n            value = value != null && unit ? `${value}${unit}` : value;\n            name = this.humpToHyphen(name);\n            this.render.setStyle(ele, name, value);\n        }\n    }\n\n    removeStyle(styles: any, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (type(styles) == 'array' && type(styles) !== 'undefined') {\n            styles.map(key => {\n                this.render.removeStyle(ele, key);\n            });\n        } else {\n            this.render.removeStyle(ele, styles);\n        }\n    }\n    // 下划线转驼峰\n    hyphenToHump(str: string) {\n        const preg = new RegExp('//-(/w)/g');\n        return str.replace(preg, (all, letter) => {\n            return letter.toUpperCase();\n        });\n    }\n    // 驼峰转下划线\n    humpToHyphen(str: string) {\n        return str.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n    }\n\n    addStyle(name: string, value: string, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (ele) {\n            return '';\n        }\n        this.render.setStyle(ele, name, value);\n    }\n\n    addClass(name: string, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (ele) {\n            return '';\n        }\n        this.render.addClass(this.ele.nativeElement, name);\n    }\n\n    setAttribute(classObj: { [key: string]: any }, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (ele) {\n            return '';\n        }\n        for (const key in classObj) {\n            if (type(classObj[key]) === 'boolean') {\n                if (classObj[key]) {\n                    this.render.setAttribute(ele, key, 'true');\n                } else {\n                    this.render.removeAttribute(ele, key);\n                }\n            } else {\n                this.render.setAttribute(ele, key, classObj[key]);\n            }\n        }\n    }\n\n    removeClass(name: string, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (ele) {\n            return '';\n        }\n        this.render.removeClass(ele, name);\n    }\n\n    private _stateChanges(changes: KeyValueChanges<string, T>) {\n        this.onStateChange(changes);\n        this.stateChange.emit(this.state);\n    }\n    private _propsChanges(changes) {\n        this.onPropsChange(changes);\n        this.propsChange.emit(this.props);\n    }\n    abstract onPropsChange(changes: KeyValueChanges<string, P>): void;\n    abstract onStateChange(changes: KeyValueChanges<string, T>): void;\n}\n",
    "import { ReactComponent, KeyValue } from './react.component';\nimport { KeyValueDiffers, ElementRef, Renderer2 } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl } from '@angular/forms';\nexport abstract class ReactComponentSetting<P extends KeyValue, T extends KeyValue> extends ReactComponent<P, T> {\n    form: FormGroup;\n    constructor(\n        differs: KeyValueDiffers,\n        ele: ElementRef,\n        render: Renderer2,\n        public fb: FormBuilder\n    ) {\n        super(differs, ele, render);\n        this.form = this.fb.group({});\n    }\n\n    initStyleForm() {\n        for (const key in this.props.style) {\n            this.form.addControl(key, new FormControl(this.props.style[key]));\n        }\n        this.form.valueChanges.subscribe(res => {\n            this.props.style = res;\n            this.onStateChange(res);\n        });\n    }\n\n    onStyleChange(res) {\n        this.setStyle(res, this.instance.ele.nativeElement);\n    }\n}",
    "\nimport {\n    ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input,\n    IterableChangeRecord, IterableChanges, IterableDiffer,\n    IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef,\n    TrackByFunction, ViewContainerRef, forwardRef, isDevMode\n} from '@angular/core';\nimport {\n    KeyValueDiffer, KeyValueChanges, KeyValueChangeRecord,\n    KeyValueDifferFactory, KeyValueDiffers\n} from '@angular/core';\nexport interface EachKeyValue<T> {\n    [key: string]: T;\n}\nexport class NgEachOfContext<T> {\n    constructor(\n        public $implicit: T,\n        public ngForOf: EachKeyValue<T>,\n        public key: string,\n    ) { }\n}\n\n@Directive({ selector: '[ngEach][ngEachOf]' })\nexport class NgEachOf<T> implements DoCheck, OnChanges {\n    @Input() ngEachOf: EachKeyValue<T>;\n    private _differ: KeyValueDiffer<string, T> | null = null;\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        private _template: TemplateRef<NgEachOfContext<T>>,\n        private _differs: KeyValueDiffers\n    ) { }\n    @Input()\n    set ngForTemplate(value: TemplateRef<NgEachOfContext<T>>) {\n        if (value) {\n            this._template = value;\n        }\n    }\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('ngEachOf' in changes) {\n            const value = changes['ngEachOf'].currentValue;\n            if (!this._differ && value) {\n                this._differ = this._differs.find(value).create();\n            }\n        }\n    }\n    ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.ngEachOf);\n            if (changes) this._applyChanges(changes);\n        }\n    }\n\n    private _applyChanges(changes: KeyValueChanges<string, T>) {\n        const insertTuples: RecordViewTuple<T>[] = [];\n        changes.forEachItem(\n            (item: KeyValueChangeRecord<string, T>) => {\n                if (item.previousValue == null) {\n                    const view = this._viewContainer.createEmbeddedView(\n                        this._template,\n                        new NgEachOfContext<T>(item.currentValue, this.ngEachOf, item.key),\n                        parseInt(item.key, 16)\n                    );\n                    const tuple = new RecordViewTuple<T>(item, view, parseInt(item.key, 16));\n                    insertTuples.push(tuple);\n                } else if (item.currentValue == null) {\n                    this._viewContainer.remove(parseInt(item.key, 16));\n                } else {\n                    const view = this._viewContainer.get(parseInt(item.key, 16))!;\n                    this._viewContainer.move(view, parseInt(item.key, 16));\n                    const tuple = new RecordViewTuple(\n                        item.currentValue,\n                        <EmbeddedViewRef<NgEachOfContext<T>>>view,\n                        parseInt(item.key, 16)\n                    );\n                    insertTuples.push(tuple);\n                }\n            }\n        );\n    }\n}\n\nclass RecordViewTuple<T> {\n    constructor(\n        public record: any,\n        public view: EmbeddedViewRef<NgEachOfContext<T>>,\n        public index: number\n    ) { }\n}\n",
    "\nimport {\n    ComponentFactoryResolver, ComponentRef, Directive,\n    Injector, Input, NgModuleFactory, NgModuleRef,\n    OnChanges, OnDestroy, SimpleChanges, StaticProvider,\n    Type, ViewContainerRef, Output, OnInit, ComponentFactory\n} from '@angular/core';\n\n@Directive({ selector: '[ngComponent]' })\nexport class NgComponentDirective implements OnInit {\n    viewContainerRef: any;\n    componentRef: ComponentRef<any>;\n    moduleRef: any;\n\n    @Input() ngComponent: any;\n    @Input() ngComponentInput: any;\n    @Output() Output: any;\n\n    constructor(_viewContainerRef: ViewContainerRef) {\n        this.viewContainerRef = _viewContainerRef;\n    }\n\n    ngOnInit() {\n        // console.log(this.ngComponentInput);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.viewContainerRef.clear();\n        this.componentRef = null;\n        if (this.ngComponent) {\n            const elInjector = this.viewContainerRef.parentInjector;\n            const componentFactoryResolver: ComponentFactoryResolver = this.moduleRef ? this.moduleRef.componentFactoryResolver :\n                elInjector.get(ComponentFactoryResolver);\n            const componentFactory: ComponentFactory<any> =\n                componentFactoryResolver.resolveComponentFactory(this.ngComponent);\n            this.componentRef = this.viewContainerRef.createComponent(\n                componentFactory,\n                this.viewContainerRef.length,\n                elInjector,\n                this.ngComponent\n            );\n            this.componentRef.instance.props = this.ngComponentInput;\n        }\n    }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { NgEachOf } from './ng-each-of';\nimport { NgComponentDirective } from './ng-component';\n@NgModule({\n    exports: [\n        NgEachOf,\n        NgComponentDirective\n    ],\n    declarations: [\n        NgEachOf,\n        NgComponentDirective\n    ]\n})\nexport class ReactCommonModule { }\n"
  ],
  "names": [
    "m",
    "Symbol",
    "o",
    "iterator",
    "n",
    "r",
    "i",
    "next",
    "done",
    "ar",
    "push",
    "value",
    "error",
    "e",
    "type",
    "val",
    "this",
    "propsChange",
    "EventEmitter",
    "onClick",
    "Object",
    "defineProperty",
    "ReactComponent",
    "prototype",
    "enumerable",
    "configurable",
    "get",
    "_onClick",
    "emit",
    "createGuid",
    "S4",
    "Math",
    "random",
    "toString",
    "substring",
    "guid",
    "setState",
    "state",
    "_stateDiffer",
    "_differs",
    "find",
    "create",
    "ngDoCheck",
    "ngOnChanges",
    "changes",
    "currentValue",
    "_propsDiffer",
    "diff",
    "props",
    "_propsChanges",
    "_stateChanges",
    "key",
    "classObj",
    "render",
    "addClass",
    "ele",
    "removeClass",
    "setStyle",
    "styleObj",
    "getNative",
    "unit",
    "name",
    "humpToHyphen",
    "removeStyle",
    "styles",
    "_this",
    "map",
    "hyphenToHump",
    "str",
    "replace",
    "toLowerCase",
    "addStyle",
    "nativeElement",
    "setAttribute",
    "onStateChange",
    "stateChange",
    "onPropsChange",
    "propDecorators",
    "Input",
    "_id",
    "HostBinding",
    "args",
    "ReactComponentSetting",
    "_super",
    "fb",
    "form",
    "group",
    "valueChanges",
    "subscribe",
    "res",
    "instance",
    "NgEachOfContext",
    "NgEachOf",
    "_viewContainer",
    "_template",
    "_differ",
    "set",
    "_applyChanges",
    "tuple",
    "RecordViewTuple",
    "item",
    "view",
    "parseInt",
    "remove",
    "insertTuples",
    "Directive",
    "selector",
    "ctorParameters",
    "ViewContainerRef",
    "TemplateRef",
    "KeyValueDiffers",
    "ngEachOf",
    "ngForTemplate",
    "record",
    "index",
    "NgComponentDirective",
    "_viewContainerRef",
    "viewContainerRef",
    "ngOnInit"
  ],
  "mappings": "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"
}
