{
  "version": 3,
  "file": "ng-react-component.umd.min.js",
  "sources": [
    "ng://ng-react-component/react.component.ts",
    "ng://ng-react-component/react.component.setting.ts",
    "ng://ng-react-component/common/ng-each-of.ts",
    "ng://ng-react-component/common/ng-component.ts",
    "ng://ng-react-component/common/common.module.ts",
    "ng://ng-react-component/createLib.ts",
    "ng://ng-react-component/react.component.list.ts"
  ],
  "sourcesContent": [
    "\nimport {\n    EventEmitter, NgZone, Input, Output,\n    KeyValueDiffer, HostListener, HostBinding, ElementRef,\n    Renderer2, isDevMode\n} from '@angular/core';\nimport { OnChanges, KeyValueChanges, DoCheck, KeyValueDiffers, SimpleChanges } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/share';\n\nfunction guid() {\n    function S4() {\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n    }\n    return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\n}\nfunction type(val): string {\n    return typeof val;\n}\nfunction defaults(target: any, options: any): KeyValue {\n    if (target === null || (typeof target !== 'object' && typeof target !== 'function')) {\n        target = {};\n    }\n    if (options) {\n        target = { ...target, ...options };\n    }\n    return target;\n}\n\nexport interface KeyValue {\n    [key: string]: any;\n    children: any[];\n}\n\nexport interface ReactBase extends KeyValue {\n    // 可拖拽\n    canDrag?: boolean;\n    // 可放置\n    canDrop?: boolean;\n    // 可移动\n    canMove?: boolean;\n    // 可缩放\n    canScale?: boolean;\n    // focus\n    focus?: boolean;\n    // 可配置\n    canSetting?: boolean;\n}\n\nexport abstract class ReactComponent<P extends ReactBase, T extends KeyValue> implements OnChanges, DoCheck {\n    @Input() state: T;\n    get state$(): Observable<KeyValue> {\n        return this.stateChange.share();\n    }\n    @Input() props: P;\n    get props$(): Observable<P> {\n        return this.propsChange.share();\n    }\n    @Output() stateChange: EventEmitter<T> = new EventEmitter();\n    @Output() propsChange: EventEmitter<P> = new EventEmitter();\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n    @Output() onHover: EventEmitter<any> = new EventEmitter();\n    @HostListener('click', ['$event'])\n    _onClick(e: Event) {\n        this.onClick.emit(e);\n    }\n\n    @Input() params = {};\n    private _stateDiffer: KeyValueDiffer<string, any>;\n    private _propsDiffer: KeyValueDiffer<string, any>;\n\n    set guid(val: string) {\n        this._id = val;\n    }\n    get guid() {\n        return this._id;\n    }\n    instance: any;\n    @HostBinding('attr.id') _id: string;\n    constructor(\n        private _differs: KeyValueDiffers,\n        public ele: ElementRef,\n        public render: Renderer2\n    ) {\n        this.props = {\n            children: []\n        } as P;\n        this.state = {} as T;\n    }\n\n    createGuid() {\n        return guid();\n    }\n\n    getNative() {\n        return this.ele.nativeElement;\n    }\n\n    setState(state: T): void {\n        this._stateDiffer = this._differs.find(this.state).create();\n        this.state = state;\n        this.ngDoCheck();\n    }\n\n    setProps(props: P): void {\n        this._propsDiffer = this._differs.find(this.props).create();\n        this.props = props;\n        this.ngDoCheck();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if ('props' in changes) {\n            const value = changes['props'].currentValue;\n            this._propsDiffer = this._differs.find(value).create();\n        }\n        if ('state' in changes) {\n            const value = changes['state'].currentValue;\n            this._stateDiffer = this._differs.find(value).create();\n        }\n    }\n\n    ngDoCheck(): void {\n        if (this._propsDiffer) {\n            const changes = this._propsDiffer.diff(this.props);\n            if (changes) this._propsChanges(changes);\n        }\n        if (this._stateDiffer) {\n            const changes = this._stateDiffer.diff(this.state);\n            if (changes) this._stateChanges(changes);\n        }\n    }\n\n    setClass(classObj: { [key: string]: boolean }, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (!ele) {\n            return '';\n        }\n        for (const key in classObj) {\n            if (classObj[key]) {\n                this.render.addClass(ele, key);\n            } else {\n                this.render.removeClass(ele, key);\n            }\n        }\n    }\n\n    setStyle(styleObj: { [key: string]: string }, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (!ele) {\n            return '';\n        }\n        for (const key in styleObj) {\n            // 检查单位\n            let [name, unit] = key.split('.');\n            let value = styleObj[key];\n            value = value != null && unit ? `${value}${unit}` : value;\n            name = this.humpToHyphen(name);\n            this.render.setStyle(ele, name, value);\n        }\n    }\n\n    removeStyle(styles: any, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (!ele) {\n            return '';\n        }\n        if (type(styles) == 'array' && type(styles) !== 'undefined') {\n            styles.map(key => {\n                this.render.removeStyle(ele, key);\n            });\n        } else {\n            this.render.removeStyle(ele, styles);\n        }\n    }\n    // 下划线转驼峰\n    hyphenToHump(str: string) {\n        const preg = new RegExp('//-(/w)/g');\n        return str.replace(preg, (all, letter) => {\n            return letter.toUpperCase();\n        });\n    }\n    // 驼峰转下划线\n    humpToHyphen(str: string) {\n        return str.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n    }\n\n    addStyle(name: string, value: string, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (!ele) {\n            return '';\n        }\n        this.render.setStyle(ele, name, value);\n    }\n\n    addClass(name: string, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (!ele) {\n            return '';\n        }\n        this.render.addClass(this.ele.nativeElement, name);\n    }\n\n    setAttribute(classObj: { [key: string]: any }, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (!ele) {\n            return '';\n        }\n        for (const key in classObj) {\n            if (type(classObj[key]) === 'boolean') {\n                if (classObj[key]) {\n                    this.render.setAttribute(ele, key, 'true');\n                } else {\n                    this.render.removeAttribute(ele, key);\n                }\n            } else {\n                this.render.setAttribute(ele, key, classObj[key]);\n            }\n        }\n    }\n\n    removeClass(name: string, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (!ele) {\n            return '';\n        }\n        this.render.removeClass(ele, name);\n    }\n\n    private _stateChanges(changes: KeyValueChanges<string, T>) {\n        this.onStateChange(changes);\n        this.stateChange.emit(this.state);\n    }\n    private _propsChanges(changes) {\n        this.onPropsChange(changes);\n        this.propsChange.emit(this.props);\n    }\n\n    public createMobileUrl(_do: string, params?: any, isDev: boolean = false) {\n        params = params || {};\n        params = { ...params, ...this.params };\n        params['do'] = _do;\n        params['c'] = params['c'] || 'entry';\n        params['i'] = params['i'] || '2';\n        let url = this.puts(params);\n        return `${this.getRoot()}/app/index.php${url}`;\n    }\n    public createWebUrl(_do: string, params?: any, isDev: boolean = false) {\n        params = params || {};\n        params = { ...params, ...this.params };\n        params['do'] = _do;\n        params['c'] = params['c'] || 'site';\n        params['a'] = params['a'] || 'entry';\n        params['i'] = params['i'] || '2';\n        let url = ``;\n        if (!isDevMode() || isDev) {\n            return `${this.getRoot()}/web/index.php${this.puts(params)}`;\n        } else {\n            return `/assets/data/${params['i']}/web/${_do}.json`\n        }\n    }\n\n    private getRoot() {\n        const { origin, protocol, port, host } = window.location;\n        if (isDevMode()) {\n            return `https://meepo.com.cn`;\n        } else {\n            return `${protocol}//${host}`;\n        }\n    }\n\n    private parseURL(): { [k: string]: string } {\n        const ret = {};\n        const seg = location.search.replace(/^\\?/, '').split('&').filter(function (v, i) {\n            if (v !== '' && v.indexOf('=')) {\n                return true;\n            }\n        });\n        seg.forEach((element, index) => {\n            const idx = element.indexOf('=');\n            const key = element.substring(0, idx);\n            const val = element.substring(idx + 1);\n            ret[key] = val;\n        });\n        return ret;\n    }\n\n    public get(name: string): string {\n        const parse = this.parseURL();\n        return parse[name] ? parse[name] : '';\n    }\n\n    public put(name: string, value: any, loc?: string) {\n        const parse = this.parseURL();\n        loc = loc || location.search;\n        // 是否有\n        if (loc.indexOf(`${name}=`) > -1) {\n            loc = loc.replace(`${name}=${parse[name]}`, `${name}=${value}`);\n        } else {\n            loc = `${loc}&${name}=${value}`;\n        }\n        return loc;\n    }\n\n    public puts(values: { [k: string]: string }) {\n        let loc = location.search;\n        for (const key in values) {\n            loc = this.put(key, values[key], loc);\n        }\n        return loc;\n    }\n    abstract onPropsChange(changes: KeyValueChanges<string, P>): void;\n    abstract onStateChange(changes: KeyValueChanges<string, T>): void;\n}\n",
    "import { ReactComponent, KeyValue } from './react.component';\nimport { KeyValueDiffers, ElementRef, Renderer2 } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl } from '@angular/forms';\n// 设置\nimport { DesignPropsService } from 'meepo-idesign-share';\nexport abstract class ReactComponentSetting<P extends KeyValue, T extends KeyValue> extends ReactComponent<P, T> {\n    form: FormGroup;\n    instance: any;\n    element: HTMLElement;\n    constructor(\n        differs: KeyValueDiffers,\n        ele: ElementRef,\n        render: Renderer2,\n        public fb: FormBuilder,\n        public _props: DesignPropsService\n    ) {\n        super(differs, ele, render);\n        this.form = this.fb.group({});\n    }\n\n    ngOnInit() {\n        this.instance = this.instance || this._props.instance;\n        if (this.instance) {\n            this.element = this.instance.ele.nativeElement;\n        }\n    }\n\n    objToArray(obj: any) {\n        const arrs: any[] = [];\n        for (const key in obj) {\n            arrs.push({\n                key: key,\n                obj: obj\n            });\n        }\n        return arrs;\n    }\n\n    initStyleForm() {\n        for (const key in this.props.style) {\n            this.form.addControl(key, new FormControl(this.props.style[key]));\n        }\n        this.form.valueChanges.subscribe(res => {\n            this.props.style = res;\n            this.onStyleChange(res);\n        });\n    }\n\n    checkFormField(name: string, value: any, to?: FormGroup) {\n        if (to) {\n            if (!to.contains(name)) {\n                to.addControl(name, new FormControl(value))\n            }\n        } else {\n            if (!this.form.contains(name)) {\n                this.form.addControl(name, new FormControl(value))\n            }\n        }\n    }\n\n    getFormType(group: FormGroup, name: string) {\n        let control: FormControl = group.get(name) as FormControl;\n        let type: string = typeof control.value;\n        return type;\n    }\n\n    checkFormGroup(name: string, obj: any) {\n        let group = this.fb.group({});\n        for (const key in obj) {\n            this.checkFormField(key, obj[key], group);\n        }\n        if (!this.form.contains(name)) {\n            this.form.addControl(name, group);\n        }\n    }\n\n    onStyleChange(res) {\n        this.setStyle(res, this.instance.ele.nativeElement);\n    }\n\n    removeSelf() {\n        const props: any = this._props.getPropsByUid(this.guid);\n        this._props.removePropsByUid(props.uuid);\n    }\n}",
    "\nimport {\n    ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input,\n    IterableChangeRecord, IterableChanges, IterableDiffer,\n    IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef,\n    TrackByFunction, ViewContainerRef, forwardRef, isDevMode\n} from '@angular/core';\n\nimport {\n    KeyValueDiffer, KeyValueChanges, KeyValueChangeRecord,\n    KeyValueDifferFactory, KeyValueDiffers\n} from '@angular/core';\n\nexport interface EachKeyValue<T> {\n    [key: string]: T;\n}\n\nexport class NgEachOfContext<T> {\n    constructor(\n        public $implicit: T,\n        public ngForOf: EachKeyValue<T>,\n        public key: string,\n    ) { }\n}\n\n@Directive({ selector: '[ngEach][ngEachOf]' })\nexport class NgEachOf<T> implements DoCheck, OnChanges {\n    @Input() ngEachOf: EachKeyValue<T>;\n    private _differ: KeyValueDiffer<string, T> | null = null;\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        private _template: TemplateRef<NgEachOfContext<T>>,\n        private _differs: KeyValueDiffers\n    ) { }\n    @Input()\n    set ngForTemplate(value: TemplateRef<NgEachOfContext<T>>) {\n        if (value) {\n            this._template = value;\n        }\n    }\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('ngEachOf' in changes) {\n            const value = changes['ngEachOf'].currentValue;\n            if (!this._differ && value) {\n                this._differ = this._differs.find(value).create();\n            }\n        }\n    }\n    ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.ngEachOf);\n            if (changes) this._applyChanges(changes);\n        }\n    }\n\n    private _applyChanges(changes: KeyValueChanges<string, T>) {\n        const insertTuples: RecordViewTuple<T>[] = [];\n        changes.forEachItem(\n            (item: KeyValueChangeRecord<string, T>) => {\n                if (item.previousValue == null) {\n                    const view = this._viewContainer.createEmbeddedView(\n                        this._template,\n                        new NgEachOfContext<T>(item.currentValue, this.ngEachOf, item.key),\n                        parseInt(item.key, 16)\n                    );\n                    const tuple = new RecordViewTuple<T>(item, view, parseInt(item.key, 16));\n                    insertTuples.push(tuple);\n                } else if (item.currentValue == null) {\n                    this._viewContainer.remove(parseInt(item.key, 16));\n                } else {\n                    const view = this._viewContainer.get(parseInt(item.key, 16))!;\n                    this._viewContainer.move(view, parseInt(item.key, 16));\n                    const tuple = new RecordViewTuple(\n                        item.currentValue,\n                        <EmbeddedViewRef<NgEachOfContext<T>>>view,\n                        parseInt(item.key, 16)\n                    );\n                    insertTuples.push(tuple);\n                }\n            }\n        );\n    }\n}\n\nclass RecordViewTuple<T> {\n    constructor(\n        public record: any,\n        public view: EmbeddedViewRef<NgEachOfContext<T>>,\n        public index: number\n    ) { }\n}\n",
    "\nimport {\n    ComponentFactoryResolver, ComponentRef, Directive,\n    Injector, Input, NgModuleFactory, NgModuleRef,\n    OnChanges, OnDestroy, SimpleChanges, StaticProvider,\n    Type, ViewContainerRef, Output, OnInit, ComponentFactory\n} from '@angular/core';\n\n@Directive({ selector: '[ngComponentPreview]' })\nexport class NgComponentPreviewDirective implements OnInit {\n    viewContainerRef: any;\n    componentRef: ComponentRef<any>;\n    moduleRef: any;\n\n    @Input() ngComponent: any;\n    @Input() ngComponentInput: any;\n    @Output() Output: any;\n\n    constructor(_viewContainerRef: ViewContainerRef) {\n        this.viewContainerRef = _viewContainerRef;\n    }\n\n    ngOnInit() {\n        // console.log(this.ngComponentInput);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.viewContainerRef.clear();\n        this.componentRef = null;\n        if (this.ngComponent) {\n            const elInjector = this.viewContainerRef.parentInjector;\n            const componentFactoryResolver: ComponentFactoryResolver = this.moduleRef ? this.moduleRef.componentFactoryResolver :\n                elInjector.get(ComponentFactoryResolver);\n            const componentFactory: ComponentFactory<any> =\n                componentFactoryResolver.resolveComponentFactory(this.ngComponent);\n            this.componentRef = this.viewContainerRef.createComponent(\n                componentFactory,\n                this.viewContainerRef.length,\n                elInjector,\n                this.ngComponent\n            );\n            this.componentRef.instance.props = this.ngComponentInput;\n        }\n    }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { NgEachOf } from './ng-each-of';\nimport { NgComponentPreviewDirective } from './ng-component';\n@NgModule({\n    exports: [\n        NgEachOf,\n        NgComponentPreviewDirective\n    ],\n    declarations: [\n        NgEachOf,\n        NgComponentPreviewDirective\n    ]\n})\nexport class ReactCommonModule { }\n",
    "export class CreateLib {\n    constructor(\n        public name: string,\n        public title: string,\n        public props: any = {},\n        public children: any[] = [],\n        public father: string = null,\n        public uuid: string = null,\n        public state: any = {},\n        public items: any[] = []\n    ) { \n        this.uuid = this.uuid || guid();\n    }\n}\n\nexport function guid() {\n    function S4() {\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n    }\n    return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\n}\n",
    "import { ReactComponent, KeyValue } from './react.component';\nimport { KeyValueDiffers, ElementRef, Renderer2 } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl } from '@angular/forms';\n// 设置\nimport { DesignPropsService } from 'meepo-idesign-share';\nexport abstract class ReactComponentList<P extends KeyValue, T extends KeyValue> extends ReactComponent<P, T> {\n    _allChecked = false;\n    _indeterminate = false;\n    _displayData = [];\n    data: any = [];\n    constructor(\n        differs: KeyValueDiffers,\n        ele: ElementRef,\n        render: Renderer2\n    ) {\n        super(differs, ele, render);\n    }\n\n    _displayDataChange($event) {\n        this._displayData = $event;\n        this._refreshStatus();\n    }\n\n    _refreshStatus() {\n        const allChecked = this._displayData.every(value => value.disabled || value.checked);\n        const allUnChecked = this._displayData.every(value => value.disabled || !value.checked);\n        this._allChecked = allChecked;\n        this._indeterminate = (!allChecked) && (!allUnChecked);\n    }\n\n    _checkAll(value) {\n        if (value) {\n            this._displayData.forEach(data => {\n                if (!data.disabled) {\n                    data.checked = true;\n                }\n            });\n        } else {\n            this._displayData.forEach(data => data.checked = false);\n        }\n        this._refreshStatus();\n    }\n}"
  ],
  "names": [
    "m",
    "Symbol",
    "o",
    "iterator",
    "n",
    "r",
    "i",
    "next",
    "done",
    "ar",
    "push",
    "value",
    "error",
    "e",
    "type",
    "val",
    "ReactComponent",
    "_differs",
    "ele",
    "render",
    "this",
    "onHover",
    "EventEmitter",
    "params",
    "Object",
    "defineProperty",
    "prototype",
    "enumerable",
    "configurable",
    "get",
    "onClick",
    "emit",
    "set",
    "createGuid",
    "guid",
    "setState",
    "state",
    "_stateDiffer",
    "find",
    "create",
    "ngDoCheck",
    "ngOnChanges",
    "changes",
    "currentValue",
    "_propsDiffer",
    "diff",
    "props",
    "_propsChanges",
    "_stateChanges",
    "key",
    "classObj",
    "addClass",
    "removeClass",
    "styleObj",
    "_a",
    "__read",
    "split",
    "name",
    "unit",
    "getNative",
    "styles",
    "map",
    "_this",
    "removeStyle",
    "hyphenToHump",
    "str",
    "preg",
    "RegExp",
    "humpToHyphen",
    "replace",
    "toLowerCase",
    "addStyle",
    "setStyle",
    "nativeElement",
    "setAttribute",
    "onStateChange",
    "stateChange",
    "onPropsChange",
    "createMobileUrl",
    "_do",
    "isDev",
    "assign",
    "getRoot",
    "url",
    "createWebUrl",
    "parseURL",
    "ret",
    "forEach",
    "element",
    "index",
    "idx",
    "indexOf",
    "substring",
    "parse",
    "loc",
    "location",
    "search",
    "puts",
    "values",
    "propDecorators",
    "Input",
    "_onClick",
    "HostListener",
    "args",
    "_id",
    "HostBinding",
    "ReactComponentSetting",
    "differs",
    "fb",
    "_props",
    "_super",
    "call",
    "ngOnInit",
    "instance",
    "obj",
    "arrs",
    "form",
    "addControl",
    "FormControl",
    "valueChanges",
    "subscribe",
    "res",
    "onStyleChange",
    "checkFormField",
    "to",
    "contains",
    "checkFormGroup",
    "group",
    "getPropsByUid",
    "removePropsByUid",
    "uuid",
    "NgEachOfContext",
    "ngForOf",
    "NgEachOf",
    "_viewContainer",
    "_template",
    "_differ",
    "view",
    "createEmbeddedView",
    "item",
    "ngEachOf",
    "parseInt",
    "remove",
    "tuple",
    "RecordViewTuple",
    "decorators",
    "Directive",
    "selector",
    "ctorParameters",
    "ViewContainerRef",
    "TemplateRef",
    "KeyValueDiffers",
    "ngForTemplate",
    "NgComponentPreviewDirective",
    "_viewContainerRef",
    "viewContainerRef",
    "elInjector",
    "parentInjector",
    "ngComponent",
    "ngComponentInput",
    "Output",
    "ReactCommonModule",
    "NgModule",
    "exports",
    "CreateLib",
    "title",
    "children",
    "father",
    "items",
    "guid$1",
    "S4",
    "Math",
    "random",
    "toString"
  ],
  "mappings": "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"
}
