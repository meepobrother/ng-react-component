{
  "version": 3,
  "file": "ng-react-component.umd.min.js",
  "sources": [
    "ng://ng-react-component/react.component.ts",
    "ng://ng-react-component/common/ng-each-of.ts",
    "ng://ng-react-component/common/ng-component.ts",
    "ng://ng-react-component/common/common.module.ts"
  ],
  "sourcesContent": [
    "\nimport { EventEmitter, NgZone, Input, Output, KeyValueDiffer } from '@angular/core';\nimport { OnChanges, KeyValueChanges, DoCheck, KeyValueDiffers } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/share';\n\nfunction defaults(target: any, options: any): KeyValue {\n    if (target === null || (typeof target !== 'object' && typeof target !== 'function')) {\n        target = {};\n    }\n    if (options) {\n        target = { ...target, ...options };\n    }\n    return target;\n}\nexport interface KeyValue {\n    [key: string]: any;\n}\nexport abstract class ReactComponent<P extends KeyValue, T extends KeyValue> {\n    private _state: T;\n    @Input()\n    set state(val: T) {\n        this.setState(val);\n    }\n    get state(): T {\n        return this._state;\n    }\n    get state$(): Observable<KeyValue> {\n        return this.stateChange.share();\n    }\n    private _props: P;\n    @Input()\n    set props(val: P) {\n        this.setProps(val);\n    }\n    get props(): P {\n        return this._props;\n    }\n    get props$(): Observable<P> {\n        return this.propsChange.share();\n    }\n    @Output() stateChange: EventEmitter<T> = new EventEmitter();\n    @Output() propsChange: EventEmitter<P> = new EventEmitter();\n    private _stateDiffer: KeyValueDiffer<string, any>;\n    private _propsDiffer: KeyValueDiffer<string, any>;\n    constructor(\n        private _differs: KeyValueDiffers\n    ) {\n        this._props = {} as P;\n        this._state = {} as T;\n\n    }\n\n    setState(state: T): Observable<KeyValue> {\n        this._stateChanges();\n        this._state = defaults(this._state, state) as T;\n        const diffter = this._stateDiffer.diff(this._state);\n        if (diffter) {\n            this.onStateChange(diffter);\n            this.stateChange.emit(this._state);\n        }\n        return this.state$;\n    }\n\n    setProps(props: P): Observable<P> {\n        this._propsChanges();\n        this._props = defaults(this._props, props) as P;\n        const diffter = this._propsDiffer.diff(this._props);\n        if (diffter) {\n            this.onPropsChange(diffter);\n            this.propsChange.emit(this._props);\n        }\n        return this.props$;\n    }\n    private _stateChanges() {\n        this._stateDiffer = this._differs.find(this._state).create();\n        return this._stateDiffer.diff(this._state);\n    }\n    private _propsChanges() {\n        this._propsDiffer = this._differs.find(this._props).create();\n        return this._propsDiffer.diff(this._props);\n    }\n    abstract onPropsChange(changes: KeyValueChanges<string, any>): void;\n    abstract onStateChange(changes: KeyValueChanges<string, any>): void;\n}\n",
    "\nimport {\n    ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input,\n    IterableChangeRecord, IterableChanges, IterableDiffer,\n    IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef,\n    TrackByFunction, ViewContainerRef, forwardRef, isDevMode\n} from '@angular/core';\nimport {\n    KeyValueDiffer, KeyValueChanges, KeyValueChangeRecord,\n    KeyValueDifferFactory, KeyValueDiffers\n} from '@angular/core';\nexport interface EachKeyValue<T> {\n    [key: string]: T;\n}\nexport class NgEachOfContext<T> {\n    constructor(\n        public $implicit: T,\n        public ngForOf: EachKeyValue<T>,\n        public key: string,\n    ) { }\n}\n\n@Directive({ selector: '[ngEach][ngEachOf]' })\nexport class NgEachOf<T> implements DoCheck, OnChanges {\n    @Input() ngEachOf: EachKeyValue<T>;\n    private _differ: KeyValueDiffer<string, T> | null = null;\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        private _template: TemplateRef<NgEachOfContext<T>>,\n        private _differs: KeyValueDiffers\n    ) { }\n    @Input()\n    set ngForTemplate(value: TemplateRef<NgEachOfContext<T>>) {\n        if (value) {\n            this._template = value;\n        }\n    }\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('ngEachOf' in changes) {\n            const value = changes['ngEachOf'].currentValue;\n            if (!this._differ && value) {\n                this._differ = this._differs.find(value).create();\n            }\n        }\n    }\n    ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.ngEachOf);\n            if (changes) this._applyChanges(changes);\n        }\n    }\n\n    private _applyChanges(changes: KeyValueChanges<string, T>) {\n        const insertTuples: RecordViewTuple<T>[] = [];\n        changes.forEachItem(\n            (item: KeyValueChangeRecord<string, T>) => {\n                if (item.previousValue == null) {\n                    const view = this._viewContainer.createEmbeddedView(\n                        this._template,\n                        new NgEachOfContext<T>(item.currentValue, this.ngEachOf, item.key),\n                        parseInt(item.key, 16)\n                    );\n                    const tuple = new RecordViewTuple<T>(item, view, parseInt(item.key, 16));\n                    insertTuples.push(tuple);\n                } else if (item.currentValue == null) {\n                    this._viewContainer.remove(parseInt(item.key, 16));\n                } else {\n                    const view = this._viewContainer.get(parseInt(item.key, 16))!;\n                    this._viewContainer.move(view, parseInt(item.key, 16));\n                    const tuple = new RecordViewTuple(\n                        item.currentValue,\n                        <EmbeddedViewRef<NgEachOfContext<T>>>view,\n                        parseInt(item.key, 16)\n                    );\n                    insertTuples.push(tuple);\n                }\n            }\n        );\n    }\n}\n\nclass RecordViewTuple<T> {\n    constructor(\n        public record: any,\n        public view: EmbeddedViewRef<NgEachOfContext<T>>,\n        public index: number\n    ) { }\n}\n",
    "\nimport {\n    ComponentFactoryResolver, ComponentRef, Directive,\n    Injector, Input, NgModuleFactory, NgModuleRef,\n    OnChanges, OnDestroy, SimpleChanges, StaticProvider,\n    Type, ViewContainerRef, Output, OnInit, ComponentFactory\n} from '@angular/core';\n\n@Directive({ selector: '[ngComponent]' })\nexport class NgComponentDirective implements OnInit {\n    viewContainerRef: any;\n    componentRef: ComponentRef<any>;\n    moduleRef: any;\n\n    @Input() ngComponent: any;\n    @Input() ngComponentInput: any;\n    @Output() Output: any;\n\n    constructor(_viewContainerRef: ViewContainerRef) {\n        this.viewContainerRef = _viewContainerRef;\n    }\n\n    ngOnInit() {\n        // console.log(this.ngComponentInput);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.viewContainerRef.clear();\n        this.componentRef = null;\n        if (this.ngComponent) {\n            const elInjector = this.viewContainerRef.parentInjector;\n            const componentFactoryResolver: ComponentFactoryResolver = this.moduleRef ? this.moduleRef.componentFactoryResolver :\n                elInjector.get(ComponentFactoryResolver);\n            const componentFactory: ComponentFactory<any> =\n                componentFactoryResolver.resolveComponentFactory(this.ngComponent);\n            this.componentRef = this.viewContainerRef.createComponent(\n                componentFactory,\n                this.viewContainerRef.length,\n                elInjector,\n                this.ngComponent\n            );\n            this.componentRef.instance.props = this.ngComponentInput;\n        }\n    }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { NgEachOf } from './ng-each-of';\nimport { NgComponentDirective } from './ng-component';\n@NgModule({\n    exports: [\n        NgEachOf,\n        NgComponentDirective\n    ],\n    declarations: [\n        NgEachOf,\n        NgComponentDirective\n    ]\n})\nexport class ReactCommonModule { }\n"
  ],
  "names": [
    "target",
    "options",
    "Object",
    "assign",
    "this",
    "stateChange",
    "EventEmitter",
    "propsChange",
    "_props",
    "_state",
    "defineProperty",
    "ReactComponent",
    "prototype",
    "setState",
    "val",
    "enumerable",
    "configurable",
    "get",
    "set",
    "setProps",
    "share",
    "state",
    "_stateChanges",
    "defaults",
    "diffter",
    "_stateDiffer",
    "diff",
    "onStateChange",
    "emit",
    "state$",
    "props",
    "_propsChanges",
    "props$",
    "_differs",
    "find",
    "create",
    "_propsDiffer",
    "propDecorators",
    "$implicit",
    "ngForOf",
    "key",
    "NgEachOf",
    "value",
    "_differ",
    "ngDoCheck",
    "changes",
    "ngEachOf",
    "_applyChanges",
    "forEachItem",
    "item",
    "insertTuples",
    "push",
    "tuple",
    "currentValue",
    "view",
    "_this",
    "_viewContainer",
    "parseInt",
    "RecordViewTuple",
    "decorators",
    "type",
    "Directive",
    "args",
    "selector",
    "ctorParameters",
    "Input",
    "record",
    "index",
    "NgComponentDirective",
    "_viewContainerRef",
    "viewContainerRef",
    "clear",
    "componentRef",
    "ngComponent",
    "ViewContainerRef"
  ],
  "mappings": "0UAYA,OANA,OAAAA,GAAA,iBAAAA,GAAA,mBAAAA,KACQA,MAERC,IACQD,EAASE,OAAjBC,UAAAH,EAAAC,IAEAD,iDAiCAI,KAAAC,YAAA,IAAAC,EAAAA,aACgBF,KAAhBG,YAAA,IAAAD,EAAAA,aALAF,KAAAI,UACAJ,KAAAK,iBAOAP,OAAAQ,eAAAC,EAAAC,UAAA,4DAzBAR,KAAAS,SAAAC,IAEAC,YAAA,8HAMQC,cAAR,+CAGQC,IAAK,WACb,OAAmBb,KAAnBI,QAGQU,IAAR,SAAAJ,GACAV,KAAAe,SAAAL,oCAaIZ,OAAJQ,eAAAC,EAAAC,UAAA,UAIQK,IAAR,WACY,OAAZb,KAAAG,YAAAa,SAEAL,YAAA,EACQC,cAAR,IAGIL,EAAJC,UAAAC,SAAA,SAAAQ,GACQjB,KAAKkB,gBACLlB,KAAKK,OAASc,EAASnB,KAAKK,OAAQY,GACpC,IAARG,EAAApB,KAAAqB,aAAAC,KAAAtB,KAAAK,QAKQ,OAJIe,IACApB,KAAKuB,cAAcH,GACnBpB,KAAKC,YAAYuB,KAAKxB,KAAKK,SAExBL,KAAKyB,QAGpBlB,EAAAC,UAAAO,SAAA,SAAAW,GACQ1B,KAAR2B,uFAIQ,iCAFR3B,KAAyBG,YAAzBqB,KAAAxB,KAAAI,SAEeJ,KAAK4B,QAjDpBrB,EAAAC,UAAAU,cAAA,WAWA,OADAlB,KAAAqB,aAAKrB,KAAL6B,SAAAC,KAAA9B,KAAAK,QAAA0B,SACA/B,KAAAqB,aAAAC,KAAAtB,KAAAK,8CCzCA,kEAAAL,KAAAgC,aAAAV,KAAAtB,KAAAI,cAaAG,EAAA0B,mJAaA,SAAAC,EAAAC,EAAAC,GACgBpC,KAAhBkC,UAAgBA,EACAlC,KAAhBmC,QAAAA,EAJAnC,KAAAoC,IAAAA,qHAaAtC,OAAAQ,eAA0B+B,EAAS7B,UAAnC,iBAKAM,IAAA,SAAAwB,GACAA,uBACA3B,YAAA,EACQC,cAAR,4GAMAZ,KAAAuC,QAAAvC,KAAA6B,SAAAC,KAAAQ,GAAAP,YAYAM,EAAiB7B,UAAjBgC,UAAA,WAAA,GAAAxC,KAAuBuC,QAAS,CAChC,IAAAE,EAA+CzC,KAA/CuC,QAA4DjB,KAA5DtB,KAAsE0C,UACtED,GAAAzC,KAAA2C,cAAAF,2DA5CAA,EAAAG,YAAA,SAAAC,8KAjBAC,EAAAC,KAAAC,QAIA,GAAA,MAAAH,EAAAI,6DAeA,CAOAC,EAAAC,EAAAC,eAAAvC,IAAAwC,SAAAR,EAAAT,IAAA,iDAkDAY,EAAA,IAAAM,EAAAT,EAAAI,aAAA,EAAAI,SAAAR,EAAAT,IAAA,wBAEAC,EAAAkB,aACAC,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,yBAGAtB,EAAAuB,eAAA,WAAA,mGCtFAlB,WAAAc,KAAAK,EAAAA,gFAqBA7D,KAAA8D,OAAAA,cAEA9D,KAAA+D,MAAAA,MAKAC,EAAA,WAIA,SAAAA,EAAAC,GAEAjE,KAAAkE,iBAAgCD,+EAnBhC,GAFAjE,KAAAkE,iBAAAC,QACAnE,KAAAoE,aAAA,KACApE,KAAAqE,YAAA,yVAaA,GCzBAL,EAAAT,aACAC,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,oBAGAK,EAAAJ,eAAA,WAAA,QACAJ,KAAAc,EAAAA,oBAEAN,EAAA/B,gBACAoC,cAAAb,KAAAK,EAAAA"
}
