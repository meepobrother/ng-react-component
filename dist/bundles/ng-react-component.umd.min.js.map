{
  "version": 3,
  "file": "ng-react-component.umd.min.js",
  "sources": [
    "ng://ng-react-component/react.component.ts",
    "ng://ng-react-component/common/ng-each-of.ts",
    "ng://ng-react-component/common/ng-component.ts",
    "ng://ng-react-component/common/common.module.ts"
  ],
  "sourcesContent": [
    "\nimport {\n    EventEmitter, NgZone, Input, Output,\n    KeyValueDiffer, HostListener, HostBinding, ElementRef,\n    Renderer2\n} from '@angular/core';\nimport { OnChanges, KeyValueChanges, DoCheck, KeyValueDiffers, SimpleChanges } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/share';\n\nfunction type(val): string {\n    return typeof val;\n}\nfunction defaults(target: any, options: any): KeyValue {\n    if (target === null || (typeof target !== 'object' && typeof target !== 'function')) {\n        target = {};\n    }\n    if (options) {\n        target = { ...target, ...options };\n    }\n    return target;\n}\nexport interface KeyValue {\n    [key: string]: any;\n}\nexport abstract class ReactComponent<P extends KeyValue, T extends KeyValue> implements OnChanges, DoCheck {\n    @Input() state: T;\n    get state$(): Observable<KeyValue> {\n        return this.stateChange.share();\n    }\n    @Input() props: P;\n    get props$(): Observable<P> {\n        return this.propsChange.share();\n    }\n    @Output() stateChange: EventEmitter<T> = new EventEmitter();\n    @Output() propsChange: EventEmitter<P> = new EventEmitter();\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n    @HostListener('click', ['$event'])\n    _onClick(e: any) {\n        this.onClick.emit(e);\n    }\n    private _stateDiffer: KeyValueDiffer<string, any>;\n    private _propsDiffer: KeyValueDiffer<string, any>;\n\n    constructor(\n        private _differs: KeyValueDiffers,\n        public ele: ElementRef,\n        public render: Renderer2\n    ) {\n        this.props = {} as P;\n        this.state = {} as T;\n    }\n\n    setState(state: T): void {\n        this._stateDiffer = this._differs.find(this.state).create();\n        this.state = defaults(this.state, state) as T;\n        this.ngDoCheck();\n    }\n\n    setProps(props: P): void {\n        this._propsDiffer = this._differs.find(this.props).create();\n        this.props = defaults(this.props, props) as P;\n        this.ngDoCheck();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if ('props' in changes) {\n            const value = changes['props'].currentValue;\n            this._propsDiffer = this._differs.find(value).create();\n        }\n        if ('state' in changes) {\n            const value = changes['state'].currentValue;\n            this._stateDiffer = this._differs.find(value).create();\n        }\n    }\n\n    ngDoCheck(): void {\n        if (this._propsDiffer) {\n            const changes = this._propsDiffer.diff(this.props);\n            if (changes) this._propsChanges(changes);\n        }\n        if (this._stateDiffer) {\n            const changes = this._stateDiffer.diff(this.state);\n            if (changes) this._stateChanges(changes);\n        }\n    }\n\n    setClass(classObj: { [key: string]: boolean }) {\n        for (const key in classObj) {\n            if (classObj[key]) {\n                this.render.addClass(this.ele.nativeElement, key);\n            } else {\n                this.render.removeClass(this.ele.nativeElement, key);\n            }\n        }\n    }\n\n    setStyle(styleObj: { [key: string]: string }) {\n        for (const key in styleObj) {\n            this.render.setStyle(this.ele.nativeElement, key, styleObj[key]);\n        }\n    }\n\n    removeStyle(styles: any) {\n        if (type(styles) == 'array') {\n            styles.map(key => {\n                this.render.removeStyle(this.ele.nativeElement, key);\n            });\n        } else {\n            this.render.removeStyle(this.ele.nativeElement, styles);\n        }\n    }\n\n    addStyle(name: string, value: string) {\n        this.render.setStyle(this.ele.nativeElement, name, value);\n    }\n\n    addClass(name: string) {\n        this.render.addClass(this.ele.nativeElement, name);\n    }\n\n    removeClass(name: string) {\n        this.render.removeClass(this.ele.nativeElement, name);\n    }\n\n    private _stateChanges(changes: KeyValueChanges<string, T>) {\n        this.onStateChange(changes);\n        this.stateChange.emit(this.state);\n    }\n    private _propsChanges(changes) {\n        this.onPropsChange(changes);\n        this.propsChange.emit(this.props);\n    }\n    abstract onPropsChange(changes: KeyValueChanges<string, P>): void;\n    abstract onStateChange(changes: KeyValueChanges<string, T>): void;\n}\n",
    "\nimport {\n    ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input,\n    IterableChangeRecord, IterableChanges, IterableDiffer,\n    IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef,\n    TrackByFunction, ViewContainerRef, forwardRef, isDevMode\n} from '@angular/core';\nimport {\n    KeyValueDiffer, KeyValueChanges, KeyValueChangeRecord,\n    KeyValueDifferFactory, KeyValueDiffers\n} from '@angular/core';\nexport interface EachKeyValue<T> {\n    [key: string]: T;\n}\nexport class NgEachOfContext<T> {\n    constructor(\n        public $implicit: T,\n        public ngForOf: EachKeyValue<T>,\n        public key: string,\n    ) { }\n}\n\n@Directive({ selector: '[ngEach][ngEachOf]' })\nexport class NgEachOf<T> implements DoCheck, OnChanges {\n    @Input() ngEachOf: EachKeyValue<T>;\n    private _differ: KeyValueDiffer<string, T> | null = null;\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        private _template: TemplateRef<NgEachOfContext<T>>,\n        private _differs: KeyValueDiffers\n    ) { }\n    @Input()\n    set ngForTemplate(value: TemplateRef<NgEachOfContext<T>>) {\n        if (value) {\n            this._template = value;\n        }\n    }\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('ngEachOf' in changes) {\n            const value = changes['ngEachOf'].currentValue;\n            if (!this._differ && value) {\n                this._differ = this._differs.find(value).create();\n            }\n        }\n    }\n    ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.ngEachOf);\n            if (changes) this._applyChanges(changes);\n        }\n    }\n\n    private _applyChanges(changes: KeyValueChanges<string, T>) {\n        const insertTuples: RecordViewTuple<T>[] = [];\n        changes.forEachItem(\n            (item: KeyValueChangeRecord<string, T>) => {\n                if (item.previousValue == null) {\n                    const view = this._viewContainer.createEmbeddedView(\n                        this._template,\n                        new NgEachOfContext<T>(item.currentValue, this.ngEachOf, item.key),\n                        parseInt(item.key, 16)\n                    );\n                    const tuple = new RecordViewTuple<T>(item, view, parseInt(item.key, 16));\n                    insertTuples.push(tuple);\n                } else if (item.currentValue == null) {\n                    this._viewContainer.remove(parseInt(item.key, 16));\n                } else {\n                    const view = this._viewContainer.get(parseInt(item.key, 16))!;\n                    this._viewContainer.move(view, parseInt(item.key, 16));\n                    const tuple = new RecordViewTuple(\n                        item.currentValue,\n                        <EmbeddedViewRef<NgEachOfContext<T>>>view,\n                        parseInt(item.key, 16)\n                    );\n                    insertTuples.push(tuple);\n                }\n            }\n        );\n    }\n}\n\nclass RecordViewTuple<T> {\n    constructor(\n        public record: any,\n        public view: EmbeddedViewRef<NgEachOfContext<T>>,\n        public index: number\n    ) { }\n}\n",
    "\nimport {\n    ComponentFactoryResolver, ComponentRef, Directive,\n    Injector, Input, NgModuleFactory, NgModuleRef,\n    OnChanges, OnDestroy, SimpleChanges, StaticProvider,\n    Type, ViewContainerRef, Output, OnInit, ComponentFactory\n} from '@angular/core';\n\n@Directive({ selector: '[ngComponent]' })\nexport class NgComponentDirective implements OnInit {\n    viewContainerRef: any;\n    componentRef: ComponentRef<any>;\n    moduleRef: any;\n\n    @Input() ngComponent: any;\n    @Input() ngComponentInput: any;\n    @Output() Output: any;\n\n    constructor(_viewContainerRef: ViewContainerRef) {\n        this.viewContainerRef = _viewContainerRef;\n    }\n\n    ngOnInit() {\n        // console.log(this.ngComponentInput);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.viewContainerRef.clear();\n        this.componentRef = null;\n        if (this.ngComponent) {\n            const elInjector = this.viewContainerRef.parentInjector;\n            const componentFactoryResolver: ComponentFactoryResolver = this.moduleRef ? this.moduleRef.componentFactoryResolver :\n                elInjector.get(ComponentFactoryResolver);\n            const componentFactory: ComponentFactory<any> =\n                componentFactoryResolver.resolveComponentFactory(this.ngComponent);\n            this.componentRef = this.viewContainerRef.createComponent(\n                componentFactory,\n                this.viewContainerRef.length,\n                elInjector,\n                this.ngComponent\n            );\n            this.componentRef.instance.props = this.ngComponentInput;\n        }\n    }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { NgEachOf } from './ng-each-of';\nimport { NgComponentDirective } from './ng-component';\n@NgModule({\n    exports: [\n        NgEachOf,\n        NgComponentDirective\n    ],\n    declarations: [\n        NgEachOf,\n        NgComponentDirective\n    ]\n})\nexport class ReactCommonModule { }\n"
  ],
  "names": [
    "target",
    "options",
    "Object",
    "assign",
    "this",
    "ele",
    "render",
    "stateChange",
    "EventEmitter",
    "propsChange",
    "onClick",
    "props",
    "state",
    "defineProperty",
    "ReactComponent",
    "prototype",
    "share",
    "enumerable",
    "configurable",
    "emit",
    "e",
    "ngDoCheck",
    "ngOnChanges",
    "changes",
    "value",
    "currentValue",
    "_propsDiffer",
    "_differs",
    "find",
    "create",
    "_stateDiffer",
    "diff",
    "_propsChanges",
    "setClass",
    "classObj",
    "key",
    "addClass",
    "nativeElement",
    "removeStyle",
    "styles",
    "_this",
    "map",
    "addStyle",
    "name",
    "setStyle",
    "removeClass",
    "onStateChange",
    "onPropsChange",
    "type",
    "Output",
    "NgEachOfContext",
    "$implicit",
    "ngForOf",
    "NgEachOf",
    "_differ",
    "_template",
    "ngEachOf",
    "_applyChanges",
    "insertTuples",
    "forEachItem",
    "item",
    "previousValue",
    "view",
    "_viewContainer",
    "createEmbeddedView",
    "parseInt",
    "tuple",
    "RecordViewTuple",
    "remove",
    "move",
    "push",
    "decorators",
    "TemplateRef",
    "KeyValueDiffers",
    "propDecorators",
    "Input",
    "ngForTemplate",
    "index",
    "NgComponentDirective",
    "_viewContainerRef",
    "viewContainerRef",
    "ngOnInit",
    "clear",
    "moduleRef",
    "componentFactoryResolver",
    "componentRef",
    "createComponent",
    "componentFactory",
    "length",
    "elInjector",
    "ngComponent",
    "instance",
    "ngComponentInput"
  ],
  "mappings": "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"
}
