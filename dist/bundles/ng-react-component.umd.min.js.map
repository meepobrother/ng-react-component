{
  "version": 3,
  "file": "ng-react-component.umd.min.js",
  "sources": [
    "ng://ng-react-component/react.component.ts",
    "ng://ng-react-component/common/ng-each-of.ts",
    "ng://ng-react-component/common/ng-component.ts",
    "ng://ng-react-component/common/common.module.ts"
  ],
  "sourcesContent": [
    "\nimport { EventEmitter, NgZone, Input, Output, KeyValueDiffer } from '@angular/core';\nimport { OnChanges, KeyValueChanges, DoCheck, KeyValueDiffers, SimpleChanges } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/share';\n\nfunction defaults(target: any, options: any): KeyValue {\n    if (target === null || (typeof target !== 'object' && typeof target !== 'function')) {\n        target = {};\n    }\n    if (options) {\n        target = { ...target, ...options };\n    }\n    return target;\n}\nexport interface KeyValue {\n    [key: string]: any;\n}\nexport abstract class ReactComponent<P extends KeyValue, T extends KeyValue> implements OnChanges, DoCheck {\n    @Input() state: T;\n    get state$(): Observable<KeyValue> {\n        return this.stateChange.share();\n    }\n    @Input() props: P;\n    get props$(): Observable<P> {\n        return this.propsChange.share();\n    }\n    @Output() stateChange: EventEmitter<T> = new EventEmitter();\n    @Output() propsChange: EventEmitter<P> = new EventEmitter();\n    private _stateDiffer: KeyValueDiffer<string, any>;\n    private _propsDiffer: KeyValueDiffer<string, any>;\n    constructor(\n        private _differs: KeyValueDiffers\n    ) {\n        this.props = {} as P;\n        this.state = {} as T;\n    }\n\n    setState(state: T): void {\n        this._stateDiffer = this._differs.find(this.state).create();\n        this.state = defaults(this.state, state) as T;\n        this.ngDoCheck();\n    }\n\n    setProps(props: P): void {\n        this._propsDiffer = this._differs.find(this.props).create();\n        this.props = defaults(this.props, props) as P;\n        this.ngDoCheck();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if ('props' in changes) {\n            const value = changes['props'].currentValue;\n            this._propsDiffer = this._differs.find(value).create();\n        }\n        if ('state' in changes) {\n            const value = changes['state'].currentValue;\n            this._stateDiffer = this._differs.find(value).create();\n        }\n    }\n\n    ngDoCheck(): void {\n        if (this._propsDiffer) {\n            const changes = this._propsDiffer.diff(this.props);\n            if (changes) this._propsChanges(changes);\n        }\n        if (this._stateDiffer) {\n            const changes = this._stateDiffer.diff(this.state);\n            if (changes) this._stateChanges(changes);\n        }\n    }\n\n    private _stateChanges(changes) {\n        this.onStateChange(changes);\n        this.stateChange.emit(this.state);\n    }\n    private _propsChanges(changes) {\n        this.onPropsChange(changes);\n        this.propsChange.emit(this.props);\n    }\n    abstract onPropsChange(changes: KeyValueChanges<string, P>): void;\n    abstract onStateChange(changes: KeyValueChanges<string, T>): void;\n}\n",
    "\nimport {\n    ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input,\n    IterableChangeRecord, IterableChanges, IterableDiffer,\n    IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef,\n    TrackByFunction, ViewContainerRef, forwardRef, isDevMode\n} from '@angular/core';\nimport {\n    KeyValueDiffer, KeyValueChanges, KeyValueChangeRecord,\n    KeyValueDifferFactory, KeyValueDiffers\n} from '@angular/core';\nexport interface EachKeyValue<T> {\n    [key: string]: T;\n}\nexport class NgEachOfContext<T> {\n    constructor(\n        public $implicit: T,\n        public ngForOf: EachKeyValue<T>,\n        public key: string,\n    ) { }\n}\n\n@Directive({ selector: '[ngEach][ngEachOf]' })\nexport class NgEachOf<T> implements DoCheck, OnChanges {\n    @Input() ngEachOf: EachKeyValue<T>;\n    private _differ: KeyValueDiffer<string, T> | null = null;\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        private _template: TemplateRef<NgEachOfContext<T>>,\n        private _differs: KeyValueDiffers\n    ) { }\n    @Input()\n    set ngForTemplate(value: TemplateRef<NgEachOfContext<T>>) {\n        if (value) {\n            this._template = value;\n        }\n    }\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('ngEachOf' in changes) {\n            const value = changes['ngEachOf'].currentValue;\n            if (!this._differ && value) {\n                this._differ = this._differs.find(value).create();\n            }\n        }\n    }\n    ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.ngEachOf);\n            if (changes) this._applyChanges(changes);\n        }\n    }\n\n    private _applyChanges(changes: KeyValueChanges<string, T>) {\n        const insertTuples: RecordViewTuple<T>[] = [];\n        changes.forEachItem(\n            (item: KeyValueChangeRecord<string, T>) => {\n                if (item.previousValue == null) {\n                    const view = this._viewContainer.createEmbeddedView(\n                        this._template,\n                        new NgEachOfContext<T>(item.currentValue, this.ngEachOf, item.key),\n                        parseInt(item.key, 16)\n                    );\n                    const tuple = new RecordViewTuple<T>(item, view, parseInt(item.key, 16));\n                    insertTuples.push(tuple);\n                } else if (item.currentValue == null) {\n                    this._viewContainer.remove(parseInt(item.key, 16));\n                } else {\n                    const view = this._viewContainer.get(parseInt(item.key, 16))!;\n                    this._viewContainer.move(view, parseInt(item.key, 16));\n                    const tuple = new RecordViewTuple(\n                        item.currentValue,\n                        <EmbeddedViewRef<NgEachOfContext<T>>>view,\n                        parseInt(item.key, 16)\n                    );\n                    insertTuples.push(tuple);\n                }\n            }\n        );\n    }\n}\n\nclass RecordViewTuple<T> {\n    constructor(\n        public record: any,\n        public view: EmbeddedViewRef<NgEachOfContext<T>>,\n        public index: number\n    ) { }\n}\n",
    "\nimport {\n    ComponentFactoryResolver, ComponentRef, Directive,\n    Injector, Input, NgModuleFactory, NgModuleRef,\n    OnChanges, OnDestroy, SimpleChanges, StaticProvider,\n    Type, ViewContainerRef, Output, OnInit, ComponentFactory\n} from '@angular/core';\n\n@Directive({ selector: '[ngComponent]' })\nexport class NgComponentDirective implements OnInit {\n    viewContainerRef: any;\n    componentRef: ComponentRef<any>;\n    moduleRef: any;\n\n    @Input() ngComponent: any;\n    @Input() ngComponentInput: any;\n    @Output() Output: any;\n\n    constructor(_viewContainerRef: ViewContainerRef) {\n        this.viewContainerRef = _viewContainerRef;\n    }\n\n    ngOnInit() {\n        // console.log(this.ngComponentInput);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.viewContainerRef.clear();\n        this.componentRef = null;\n        if (this.ngComponent) {\n            const elInjector = this.viewContainerRef.parentInjector;\n            const componentFactoryResolver: ComponentFactoryResolver = this.moduleRef ? this.moduleRef.componentFactoryResolver :\n                elInjector.get(ComponentFactoryResolver);\n            const componentFactory: ComponentFactory<any> =\n                componentFactoryResolver.resolveComponentFactory(this.ngComponent);\n            this.componentRef = this.viewContainerRef.createComponent(\n                componentFactory,\n                this.viewContainerRef.length,\n                elInjector,\n                this.ngComponent\n            );\n            this.componentRef.instance.props = this.ngComponentInput;\n        }\n    }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { NgEachOf } from './ng-each-of';\nimport { NgComponentDirective } from './ng-component';\n@NgModule({\n    exports: [\n        NgEachOf,\n        NgComponentDirective\n    ],\n    declarations: [\n        NgEachOf,\n        NgComponentDirective\n    ]\n})\nexport class ReactCommonModule { }\n"
  ],
  "names": [
    "target",
    "options",
    "Object",
    "assign",
    "this",
    "stateChange",
    "EventEmitter",
    "propsChange",
    "props",
    "state",
    "defineProperty",
    "ReactComponent",
    "prototype",
    "share",
    "enumerable",
    "configurable",
    "ngDoCheck",
    "ngOnChanges",
    "changes",
    "value",
    "currentValue",
    "_propsDiffer",
    "_differs",
    "find",
    "create",
    "_stateDiffer",
    "diff",
    "_propsChanges",
    "emit",
    "onPropsChange",
    "type",
    "Output",
    "$implicit",
    "ngForOf",
    "key",
    "NgEachOf",
    "_differ",
    "_template",
    "ngEachOf",
    "_applyChanges",
    "_this",
    "insertTuples",
    "forEachItem",
    "item",
    "previousValue",
    "view",
    "_viewContainer",
    "createEmbeddedView",
    "NgEachOfContext",
    "parseInt",
    "tuple",
    "RecordViewTuple",
    "push",
    "Directive",
    "args",
    "selector",
    "KeyValueDiffers",
    "propDecorators",
    "Input",
    "ngForTemplate",
    "index",
    "NgComponentDirective",
    "viewContainerRef",
    "_viewContainerRef",
    "ngOnInit",
    "componentRef",
    "elInjector",
    "get",
    "ComponentFactoryResolver",
    "instance",
    "ngComponentInput",
    "ctorParameters",
    "ngComponent",
    "ReactCommonModule"
  ],
  "mappings": "0UAYA,OANA,OAAAA,GAAA,iBAAAA,GAAA,mBAAAA,KACQA,MAERC,IACQD,EAASE,OAAjBC,UAAAH,EAAAC,IAEAD,iDAmBAI,KAAAC,YAAA,IAAAC,EAAAA,aACgBF,KAAhBG,YAAA,IAAAD,EAAAA,aALAF,KAAAI,SACAJ,KAAAK,gBAOAP,OAAAQ,eAAAC,EAA4BC,UAA5B,yBAfA,OAAAR,KAAAC,YAAAQ,SAEAC,YAAA,8HAgBAC,cAAA,0HAMAX,KAAaY,mIAMbZ,KAAAY,aAMAL,EAAAC,UAAAK,YAA0B,SAA1BC,GACA,GAAY,UAAZA,EAAgC,CAChC,IAAAC,EAAAD,EAAA,MAAAE,aACAhB,KAAAiB,aAAAjB,KAAAkB,SAAAC,KAAAJ,GAAAK,gDAEApB,KAAAqB,aAAArB,KAAAkB,SAAAC,KAAAJ,GAAAK,WAKAb,EAAAC,UAA6BI,UAA7B,WAEY,MADAZ,KAAZiB,gBACAH,EAAAd,KAAAiB,aAAAK,KAAAtB,KAAAI,SACAJ,KAAAuB,cAAAT,oJAOAd,KAAAC,YAAiCuB,KAAjCxB,KAAAK,QAzDAE,EAAAC,UAAAe,cAAA,SAAAT,GAIAd,KAAAyB,cAAUX,GAIVd,KAAAG,YAAAqB,KAAAxB,KAAAI,2GC1BAD,cAAAuB,KAAAC,EAAAA,kCAmBA,SAAAC,EAAAC,EAAAC,GAGA9B,KAAA4B,UAAAA,gCAGIG,EAAJ,oFAMQ/B,KAARgC,QAAA,KARA,OAUAlC,OAAAQ,eAA0ByB,EAASvB,UAAnC,qCAGgBR,KAAhBiC,UAAAlB,IAGAL,YAAA,EACAC,cAAA,wCAIA,GAAA,aAAAG,EAAA,CACY,IAAZC,EAAAD,EAAA,SAAAE,cACAhB,KAAAgC,SAAAjB,IACgBf,KAAhBgC,QAAAhC,KAAAkB,SAAAC,KAAAJ,GAAAK,6CAIA,GAAApB,KAAyBgC,QAAzB,CACA,IAAAlB,EAA0Bd,KAA2BgC,QAArDV,KAAAtB,KAAAkC,UACgBpB,GAEId,KAAKmC,cAAzBrB,KAUAiB,EAAiBvB,UAAjB2B,cAAA,SAAArB,GAAA,IAAAsB,EAAApC,KACAqC,KACAvB,EAAoBwB,YAApB,SAAAC,GACA,GAAA,MAAoBA,EAApBC,cAA+B,CAKX,IAApBC,EAAAL,EAAAM,eAAAC,mBAAAP,EAAAH,UAAA,IAAAW,EAAAL,EAAAvB,aAAAoB,EAAAF,SAAAK,EAAAT,KAAAe,SAAAN,EAAAT,IAAA,KACAgB,EAAA,IAAAC,EAAAR,EAAAE,EAAAI,SAAAN,EAAAT,IAAA,KACAO,EAAAW,KAAAF,wKAvEAA,EAAA,IAAAC,EAAAR,EAAAvB,aAAA,EAAA6B,SAAAN,EAAAT,IAAA,KADAO,EAAAW,KAAAF,OAoBAf,EAEA,kBAuDAL,KAAAuB,EAAAA,UAAAC,OAAAC,SAAA,4GACAzB,KAAA0B,EAAAA,mBAEArB,EAAAsB,gBACAnB,WAAAR,KAAA4B,EAAAA,QACAC,gBAAA7B,KAAA4B,EAAAA,0BClEA,iDAFAtD,KAAAwD,MAAAA,MAMAC,EAAA,yBAEAzD,KAAA0D,iBAAAC,SAKAF,EAAAjD,UAAkBoD,SAAlB,kFAvBA5D,KAAA6D,aAAA,4HAHAC,EAAAC,IAAAC,EAAAA,gLASAhE,KAAA6D,aAAAI,SAAA7D,MAAAJ,KAAAkE,qBAUA,uECxBAT,EAAAU,eAAA,WAAA,mCAGAV,EAAAJ,gBACAe,cAAA1C,KAAA4B,EAAAA,QACAY,mBAAAxC,KAAA4B,EAAAA,QACA3B,SAAAD,KAAAC,EAAAA,UAMA,IAAA0C,EAAA,+BAAA"
}
