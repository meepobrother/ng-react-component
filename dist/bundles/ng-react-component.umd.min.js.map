{
  "version": 3,
  "file": "ng-react-component.umd.min.js",
  "sources": [
    "ng://ng-react-component/react.component.ts",
    "ng://ng-react-component/react.component.setting.ts",
    "ng://ng-react-component/common/ng-each-of.ts",
    "ng://ng-react-component/common/ng-component.ts",
    "ng://ng-react-component/common/common.module.ts",
    "ng://ng-react-component/createLib.ts"
  ],
  "sourcesContent": [
    "\nimport {\n    EventEmitter, NgZone, Input, Output,\n    KeyValueDiffer, HostListener, HostBinding, ElementRef,\n    Renderer2\n} from '@angular/core';\nimport { OnChanges, KeyValueChanges, DoCheck, KeyValueDiffers, SimpleChanges } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/share';\n\nfunction guid() {\n    function S4() {\n        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n    }\n    return (S4() + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + \"-\" + S4() + S4() + S4());\n}\nfunction type(val): string {\n    return typeof val;\n}\nfunction defaults(target: any, options: any): KeyValue {\n    if (target === null || (typeof target !== 'object' && typeof target !== 'function')) {\n        target = {};\n    }\n    if (options) {\n        target = { ...target, ...options };\n    }\n    return target;\n}\n\nexport interface KeyValue {\n    [key: string]: any;\n    children: any[];\n}\n\nexport interface ReactBase extends KeyValue {\n    // 可拖拽\n    canDrag?: boolean;\n    // 可放置\n    canDrop?: boolean;\n    // 可移动\n    canMove?: boolean;\n    // 可缩放\n    canScale?: boolean;\n    // focus\n    focus?: boolean;\n    // 可配置\n    canSetting?: boolean;\n}\n\nexport abstract class ReactComponent<P extends ReactBase, T extends KeyValue> implements OnChanges, DoCheck {\n    @Input() state: T;\n    get state$(): Observable<KeyValue> {\n        return this.stateChange.share();\n    }\n    @Input() props: P;\n    get props$(): Observable<P> {\n        return this.propsChange.share();\n    }\n    @Output() stateChange: EventEmitter<T> = new EventEmitter();\n    @Output() propsChange: EventEmitter<P> = new EventEmitter();\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n    @Output() onHover: EventEmitter<any> = new EventEmitter();\n\n    @HostListener('mouseenter', ['$event'])\n    mouseover() {\n        this.props.focus = true;\n        this.onHover.emit(this.props.focus);\n    }\n    @HostListener('mouseleave', ['$event'])\n    mouseleave() {\n        this.props.focus = false;\n        this.onHover.emit(this.props.focus);\n    }\n    /**\n     * 监听click事件\n     * @param e \n     */\n    @HostListener('click', ['$event'])\n    _onClick(e: Event) {\n        this.onClick.emit(e);\n    }\n    private _stateDiffer: KeyValueDiffer<string, any>;\n    private _propsDiffer: KeyValueDiffer<string, any>;\n\n    set guid(val: string) {\n        this._id = val;\n    }\n    get guid() {\n        return this._id;\n    }\n    instance: any;\n    @HostBinding('attr.id') _id: string;\n    constructor(\n        private _differs: KeyValueDiffers,\n        public ele: ElementRef,\n        public render: Renderer2\n    ) {\n        this.props = {\n            children: []\n        } as P;\n        this.state = {} as T;\n    }\n\n    createGuid() {\n        return guid();\n    }\n\n    getNative() {\n        return this.ele.nativeElement;\n    }\n\n    setState(state: T): void {\n        this._stateDiffer = this._differs.find(this.state).create();\n        this.state = state;\n        this.ngDoCheck();\n    }\n\n    setProps(props: P): void {\n        this._propsDiffer = this._differs.find(this.props).create();\n        this.props = props;\n        this.ngDoCheck();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if ('props' in changes) {\n            const value = changes['props'].currentValue;\n            this._propsDiffer = this._differs.find(value).create();\n        }\n        if ('state' in changes) {\n            const value = changes['state'].currentValue;\n            this._stateDiffer = this._differs.find(value).create();\n        }\n    }\n\n    ngDoCheck(): void {\n        if (this._propsDiffer) {\n            const changes = this._propsDiffer.diff(this.props);\n            if (changes) this._propsChanges(changes);\n        }\n        if (this._stateDiffer) {\n            const changes = this._stateDiffer.diff(this.state);\n            if (changes) this._stateChanges(changes);\n        }\n    }\n\n    setClass(classObj: { [key: string]: boolean }, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (!ele) {\n            return '';\n        }\n        for (const key in classObj) {\n            if (classObj[key]) {\n                this.render.addClass(ele, key);\n            } else {\n                this.render.removeClass(ele, key);\n            }\n        }\n    }\n\n    setStyle(styleObj: { [key: string]: string }, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (!ele) {\n            return '';\n        }\n        for (const key in styleObj) {\n            // 检查单位\n            let [name, unit] = key.split('.');\n            let value = styleObj[key];\n            value = value != null && unit ? `${value}${unit}` : value;\n            name = this.humpToHyphen(name);\n            this.render.setStyle(ele, name, value);\n        }\n    }\n\n    removeStyle(styles: any, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (!ele) {\n            return '';\n        }\n        if (type(styles) == 'array' && type(styles) !== 'undefined') {\n            styles.map(key => {\n                this.render.removeStyle(ele, key);\n            });\n        } else {\n            this.render.removeStyle(ele, styles);\n        }\n    }\n    // 下划线转驼峰\n    hyphenToHump(str: string) {\n        const preg = new RegExp('//-(/w)/g');\n        return str.replace(preg, (all, letter) => {\n            return letter.toUpperCase();\n        });\n    }\n    // 驼峰转下划线\n    humpToHyphen(str: string) {\n        return str.replace(/([A-Z])/g, \"-$1\").toLowerCase();\n    }\n\n    addStyle(name: string, value: string, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (!ele) {\n            return '';\n        }\n        this.render.setStyle(ele, name, value);\n    }\n\n    addClass(name: string, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (!ele) {\n            return '';\n        }\n        this.render.addClass(this.ele.nativeElement, name);\n    }\n\n    setAttribute(classObj: { [key: string]: any }, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (!ele) {\n            return '';\n        }\n        for (const key in classObj) {\n            if (type(classObj[key]) === 'boolean') {\n                if (classObj[key]) {\n                    this.render.setAttribute(ele, key, 'true');\n                } else {\n                    this.render.removeAttribute(ele, key);\n                }\n            } else {\n                this.render.setAttribute(ele, key, classObj[key]);\n            }\n        }\n    }\n\n    removeClass(name: string, ele?: HTMLElement) {\n        ele = ele || this.getNative();\n        if (!ele) {\n            return '';\n        }\n        this.render.removeClass(ele, name);\n    }\n\n    private _stateChanges(changes: KeyValueChanges<string, T>) {\n        this.onStateChange(changes);\n        this.stateChange.emit(this.state);\n    }\n    private _propsChanges(changes) {\n        this.onPropsChange(changes);\n        this.propsChange.emit(this.props);\n    }\n    abstract onPropsChange(changes: KeyValueChanges<string, P>): void;\n    abstract onStateChange(changes: KeyValueChanges<string, T>): void;\n}\n",
    "import { ReactComponent, KeyValue } from './react.component';\nimport { KeyValueDiffers, ElementRef, Renderer2 } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl } from '@angular/forms';\n// 设置\nexport abstract class ReactComponentSetting<P extends KeyValue, T extends KeyValue> extends ReactComponent<P, T> {\n    form: FormGroup;\n    constructor(\n        differs: KeyValueDiffers,\n        ele: ElementRef,\n        render: Renderer2,\n        public fb: FormBuilder\n    ) {\n        super(differs, ele, render);\n        this.form = this.fb.group({});\n    }\n\n    initStyleForm() {\n        for (const key in this.props.style) {\n            this.form.addControl(key, new FormControl(this.props.style[key]));\n        }\n        this.form.valueChanges.subscribe(res => {\n            this.props.style = res;\n            this.onStyleChange(res);\n        });\n    }\n\n    onStyleChange(res) {\n        this.setStyle(res, this.instance.ele.nativeElement);\n    }\n}",
    "\nimport {\n    ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input,\n    IterableChangeRecord, IterableChanges, IterableDiffer,\n    IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef,\n    TrackByFunction, ViewContainerRef, forwardRef, isDevMode\n} from '@angular/core';\nimport {\n    KeyValueDiffer, KeyValueChanges, KeyValueChangeRecord,\n    KeyValueDifferFactory, KeyValueDiffers\n} from '@angular/core';\nexport interface EachKeyValue<T> {\n    [key: string]: T;\n}\nexport class NgEachOfContext<T> {\n    constructor(\n        public $implicit: T,\n        public ngForOf: EachKeyValue<T>,\n        public key: string,\n    ) { }\n}\n\n@Directive({ selector: '[ngEach][ngEachOf]' })\nexport class NgEachOf<T> implements DoCheck, OnChanges {\n    @Input() ngEachOf: EachKeyValue<T>;\n    private _differ: KeyValueDiffer<string, T> | null = null;\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        private _template: TemplateRef<NgEachOfContext<T>>,\n        private _differs: KeyValueDiffers\n    ) { }\n    @Input()\n    set ngForTemplate(value: TemplateRef<NgEachOfContext<T>>) {\n        if (value) {\n            this._template = value;\n        }\n    }\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('ngEachOf' in changes) {\n            const value = changes['ngEachOf'].currentValue;\n            if (!this._differ && value) {\n                this._differ = this._differs.find(value).create();\n            }\n        }\n    }\n    ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.ngEachOf);\n            if (changes) this._applyChanges(changes);\n        }\n    }\n\n    private _applyChanges(changes: KeyValueChanges<string, T>) {\n        const insertTuples: RecordViewTuple<T>[] = [];\n        changes.forEachItem(\n            (item: KeyValueChangeRecord<string, T>) => {\n                if (item.previousValue == null) {\n                    const view = this._viewContainer.createEmbeddedView(\n                        this._template,\n                        new NgEachOfContext<T>(item.currentValue, this.ngEachOf, item.key),\n                        parseInt(item.key, 16)\n                    );\n                    const tuple = new RecordViewTuple<T>(item, view, parseInt(item.key, 16));\n                    insertTuples.push(tuple);\n                } else if (item.currentValue == null) {\n                    this._viewContainer.remove(parseInt(item.key, 16));\n                } else {\n                    const view = this._viewContainer.get(parseInt(item.key, 16))!;\n                    this._viewContainer.move(view, parseInt(item.key, 16));\n                    const tuple = new RecordViewTuple(\n                        item.currentValue,\n                        <EmbeddedViewRef<NgEachOfContext<T>>>view,\n                        parseInt(item.key, 16)\n                    );\n                    insertTuples.push(tuple);\n                }\n            }\n        );\n    }\n}\n\nclass RecordViewTuple<T> {\n    constructor(\n        public record: any,\n        public view: EmbeddedViewRef<NgEachOfContext<T>>,\n        public index: number\n    ) { }\n}\n",
    "\nimport {\n    ComponentFactoryResolver, ComponentRef, Directive,\n    Injector, Input, NgModuleFactory, NgModuleRef,\n    OnChanges, OnDestroy, SimpleChanges, StaticProvider,\n    Type, ViewContainerRef, Output, OnInit, ComponentFactory\n} from '@angular/core';\n\n@Directive({ selector: '[ngComponent]' })\nexport class NgComponentDirective implements OnInit {\n    viewContainerRef: any;\n    componentRef: ComponentRef<any>;\n    moduleRef: any;\n\n    @Input() ngComponent: any;\n    @Input() ngComponentInput: any;\n    @Output() Output: any;\n\n    constructor(_viewContainerRef: ViewContainerRef) {\n        this.viewContainerRef = _viewContainerRef;\n    }\n\n    ngOnInit() {\n        // console.log(this.ngComponentInput);\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        this.viewContainerRef.clear();\n        this.componentRef = null;\n        if (this.ngComponent) {\n            const elInjector = this.viewContainerRef.parentInjector;\n            const componentFactoryResolver: ComponentFactoryResolver = this.moduleRef ? this.moduleRef.componentFactoryResolver :\n                elInjector.get(ComponentFactoryResolver);\n            const componentFactory: ComponentFactory<any> =\n                componentFactoryResolver.resolveComponentFactory(this.ngComponent);\n            this.componentRef = this.viewContainerRef.createComponent(\n                componentFactory,\n                this.viewContainerRef.length,\n                elInjector,\n                this.ngComponent\n            );\n            this.componentRef.instance.props = this.ngComponentInput;\n        }\n    }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { NgEachOf } from './ng-each-of';\nimport { NgComponentDirective } from './ng-component';\n@NgModule({\n    exports: [\n        NgEachOf,\n        NgComponentDirective\n    ],\n    declarations: [\n        NgEachOf,\n        NgComponentDirective\n    ]\n})\nexport class ReactCommonModule { }\n",
    "export class CreateLib {\n    constructor(\n        public name: string,\n        public title: string,\n        public props: any = {},\n        public children: any[] = [],\n        public state: any = {},\n        public items: any[] = []\n    ) { }\n}\n"
  ],
  "names": [
    "m",
    "Symbol",
    "o",
    "iterator",
    "n",
    "r",
    "i",
    "next",
    "done",
    "ar",
    "push",
    "value",
    "error",
    "e",
    "type",
    "val",
    "ReactComponent",
    "_differs",
    "ele",
    "render",
    "this",
    "propsChange",
    "EventEmitter",
    "onClick",
    "onHover",
    "Object",
    "defineProperty",
    "prototype",
    "configurable",
    "share",
    "enumerable",
    "mouseover",
    "emit",
    "set",
    "createGuid",
    "guid",
    "setState",
    "state",
    "_stateDiffer",
    "find",
    "create",
    "ngDoCheck",
    "ngOnChanges",
    "changes",
    "currentValue",
    "_propsDiffer",
    "diff",
    "props",
    "_propsChanges",
    "_stateChanges",
    "key",
    "classObj",
    "addClass",
    "removeClass",
    "styleObj",
    "_a",
    "__read",
    "split",
    "name",
    "unit",
    "getNative",
    "styles",
    "map",
    "_this",
    "removeStyle",
    "hyphenToHump",
    "str",
    "preg",
    "RegExp",
    "humpToHyphen",
    "replace",
    "toLowerCase",
    "addStyle",
    "setStyle",
    "nativeElement",
    "setAttribute",
    "propDecorators",
    "Input",
    "stateChange",
    "Output",
    "form",
    "fb",
    "group",
    "__extends",
    "ReactComponentSetting",
    "_super",
    "initStyleForm",
    "res",
    "onStyleChange",
    "NgEachOfContext",
    "$implicit",
    "ngForOf",
    "NgEachOf",
    "_template",
    "_differ",
    "_applyChanges",
    "insertTuples",
    "tuple",
    "view",
    "_viewContainer",
    "get",
    "parseInt",
    "item",
    "ctorParameters",
    "ViewContainerRef",
    "TemplateRef",
    "KeyValueDiffers",
    "ngEachOf",
    "ngForTemplate",
    "RecordViewTuple",
    "record",
    "viewContainerRef",
    "_viewContainerRef",
    "NgComponentDirective",
    "ngOnInit",
    "elInjector",
    "ComponentFactoryResolver",
    "Directive",
    "args",
    "selector",
    "ngComponent",
    "ngComponentInput"
  ],
  "mappings": "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"
}
