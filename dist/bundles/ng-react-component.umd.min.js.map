{
  "version": 3,
  "file": "ng-react-component.umd.min.js",
  "sources": [
    "ng://ng-react-component/react.component.ts",
    "ng://ng-react-component/common/ng-each-of.ts",
    "ng://ng-react-component/common/common.module.ts"
  ],
  "sourcesContent": [
    "\nimport { EventEmitter, NgZone, Input, Output, KeyValueDiffer } from '@angular/core';\nimport { OnChanges, KeyValueChanges, DoCheck, KeyValueDiffers } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/share';\n\nfunction defaults(target: any, options: any): KeyValue {\n    if (target === null || (typeof target !== 'object' && typeof target !== 'function')) {\n        target = {};\n    }\n    if (options) {\n        target = { ...target, ...options };\n    }\n    return target;\n}\nexport interface KeyValue {\n    [key: string]: any;\n}\nexport abstract class ReactComponent<P extends KeyValue, T extends KeyValue> {\n    private _state: T;\n    @Input()\n    set state(val: T) {\n        this._state = val;\n    }\n    get state(): T {\n        return defaults(this.getInitialState(), this._state) as T;\n    }\n    get state$(): Observable<KeyValue> {\n        return this.stateChange.share();\n    }\n    private _props: P;\n    @Input()\n    set props(val: P) {\n        this._props = val;\n    }\n    get props(): P {\n        return defaults(this.getDefaultProps(), this._props) as P;\n    }\n    get props$(): Observable<P> {\n        return this.propsChange.share();\n    }\n    @Output() stateChange: EventEmitter<T> = new EventEmitter();\n    @Output() propsChange: EventEmitter<P> = new EventEmitter();\n    private _stateDiffer: KeyValueDiffer<string, any>;\n    private _propsDiffer: KeyValueDiffer<string, any>;\n    constructor(\n        private _differs: KeyValueDiffers\n    ) { }\n    setState(state: T): Observable<KeyValue> {\n        this._stateChanges();\n        this.state = defaults(this.state, state) as T;\n        const diffter = this._stateDiffer.diff(this.state);\n        if (diffter) {\n            this.onStateChange(diffter);\n            this.stateChange.emit(this.state);\n        }\n        return this.state$;\n    }\n    setProps(props: P): Observable<P> {\n        this._propsChanges();\n        this.props = defaults(this.props, props) as P;\n        const diffter = this._propsDiffer.diff(this.props);\n        if (diffter) {\n            this.onPropsChange(diffter);\n            this.propsChange.emit(this.props);\n        }\n        return this.props$;\n    }\n    private _stateChanges() {\n        this._stateDiffer = this._differs.find(this.state).create();\n        return this._stateDiffer.diff(this.state);\n    }\n    private _propsChanges() {\n        this._propsDiffer = this._differs.find(this.props).create();\n        return this._propsDiffer.diff(this.props);\n    }\n    abstract onPropsChange(changes: KeyValueChanges<string, any>): void;\n    abstract onStateChange(changes: KeyValueChanges<string, any>): void;\n    abstract getDefaultProps(): P;\n    abstract getInitialState(): T;\n}\n",
    "\nimport {\n    ChangeDetectorRef, Directive, DoCheck, EmbeddedViewRef, Input,\n    IterableChangeRecord, IterableChanges, IterableDiffer,\n    IterableDiffers, NgIterable, OnChanges, SimpleChanges, TemplateRef,\n    TrackByFunction, ViewContainerRef, forwardRef, isDevMode\n} from '@angular/core';\nimport {\n    KeyValueDiffer, KeyValueChanges, KeyValueChangeRecord,\n    KeyValueDifferFactory, KeyValueDiffers\n} from '@angular/core';\nexport interface EachKeyValue<T> {\n    [key: string]: T;\n}\nexport class NgEachOfContext<T> {\n    constructor(\n        public $implicit: T,\n        public ngForOf: EachKeyValue<T>,\n        public key: string,\n    ) { }\n}\n\n@Directive({ selector: '[ngEach][ngEachOf]' })\nexport class NgEachOf<T> implements DoCheck, OnChanges {\n    @Input() ngEachOf: EachKeyValue<T>;\n    private _differ: KeyValueDiffer<string, T> | null = null;\n    constructor(\n        private _viewContainer: ViewContainerRef,\n        private _template: TemplateRef<NgEachOfContext<T>>,\n        private _differs: KeyValueDiffers\n    ) { }\n    @Input()\n    set ngForTemplate(value: TemplateRef<NgEachOfContext<T>>) {\n        if (value) {\n            this._template = value;\n        }\n    }\n    ngOnChanges(changes: SimpleChanges): void {\n        if ('ngEachOf' in changes) {\n            const value = changes['ngEachOf'].currentValue;\n            if (!this._differ && value) {\n                this._differ = this._differs.find(value).create();\n            }\n        }\n    }\n    ngDoCheck(): void {\n        if (this._differ) {\n            const changes = this._differ.diff(this.ngEachOf);\n            if (changes) this._applyChanges(changes);\n        }\n    }\n\n    private _applyChanges(changes: KeyValueChanges<string, T>) {\n        const insertTuples: RecordViewTuple<T>[] = [];\n        changes.forEachItem(\n            (item: KeyValueChangeRecord<string, T>) => {\n                if (item.previousValue == null) {\n                    const view = this._viewContainer.createEmbeddedView(\n                        this._template,\n                        new NgEachOfContext<T>(item.currentValue, this.ngEachOf, item.key),\n                        parseInt(item.key, 16)\n                    );\n                    const tuple = new RecordViewTuple<T>(item, view, parseInt(item.key, 16));\n                    insertTuples.push(tuple);\n                } else if (item.currentValue == null) {\n                    this._viewContainer.remove(parseInt(item.key, 16));\n                } else {\n                    const view = this._viewContainer.get(parseInt(item.key, 16))!;\n                    this._viewContainer.move(view, parseInt(item.key, 16));\n                    const tuple = new RecordViewTuple(\n                        item.currentValue,\n                        <EmbeddedViewRef<NgEachOfContext<T>>>view,\n                        parseInt(item.key, 16)\n                    );\n                    insertTuples.push(tuple);\n                }\n            }\n        );\n    }\n}\n\nclass RecordViewTuple<T> {\n    constructor(\n        public record: any,\n        public view: EmbeddedViewRef<NgEachOfContext<T>>,\n        public index: number\n    ) { }\n}\n",
    "import { NgModule } from '@angular/core';\nimport { NgEachOf } from './ng-each-of';\n\n@NgModule({\n    exports: [\n        NgEachOf\n    ],\n    declarations: [\n        NgEachOf\n    ]\n})\nexport class ReactCommonModule { }\n"
  ],
  "names": [
    "target",
    "options",
    "Object",
    "assign",
    "this",
    "stateChange",
    "EventEmitter",
    "propsChange",
    "defineProperty",
    "ReactComponent",
    "prototype",
    "_state",
    "val",
    "enumerable",
    "configurable",
    "get",
    "defaults",
    "getDefaultProps",
    "_props",
    "set",
    "share",
    "setState",
    "state",
    "_stateChanges",
    "diffter",
    "_stateDiffer",
    "diff",
    "onStateChange",
    "emit",
    "state$",
    "setProps",
    "props",
    "_propsChanges",
    "props$",
    "_differs",
    "find",
    "create",
    "_propsDiffer",
    "propDecorators",
    "$implicit",
    "ngForOf",
    "key",
    "NgEachOf",
    "value",
    "_differ",
    "ngDoCheck",
    "changes",
    "ngEachOf",
    "_applyChanges",
    "forEachItem",
    "item",
    "insertTuples",
    "push",
    "tuple",
    "currentValue",
    "view",
    "_this",
    "_viewContainer",
    "parseInt",
    "RecordViewTuple",
    "decorators",
    "type",
    "Directive",
    "args",
    "selector",
    "ctorParameters",
    "Input",
    "record",
    "index"
  ],
  "mappings": "0UAYA,OANA,OAAAA,GAAA,iBAAAA,GAAA,mBAAAA,KACQA,MAERC,IACQD,EAASE,OAAjBC,UAAAH,EAAAC,IAEAD,iDAiCAI,KAAAC,YAAA,IAAAC,EAAAA,aACgBF,KAAhBG,YAAA,IAAAD,EAAAA,oBAJAJ,OAAAM,eAAAC,EAAAC,UAAA,sFAlBAN,KAAAO,OAAAC,GAEAC,YAAA,8HAMQC,cAAR,+CAGQC,IAAK,WACb,OAAAC,EAA4BZ,KAA5Ba,kBAAoDb,KAApDc,SAGQC,IAAR,SAAAP,GACAR,KAAAc,OAAAN,mCAQIV,OAAJM,eAAAC,EAAAC,UAAA,UAIQK,IAAR,WACY,OAAZX,KAAAG,YAAAa,SAEAP,YAAA,EACQC,cAAR,IAEIL,EAAJC,UAAAW,SAAA,SAAAC,GACQlB,KAAKmB,gBACLnB,KAAKkB,MAAQN,EAASZ,KAAKkB,MAAOA,GAClC,IAARE,EAAApB,KAAAqB,aAAAC,KAAAtB,KAAAkB,OAKQ,OAJIE,IACApB,KAAKuB,cAAcH,GACnBpB,KAAKC,YAAYuB,KAAKxB,KAAKkB,QAExBlB,KAAKyB,QAGpBpB,EAAAC,UAAAoB,SAAA,SAAAC,GACQ3B,KAAR4B,oFAIQ,iCAFR5B,KAAyBG,YAAzBqB,KAAAxB,KAAA2B,QAEe3B,KAAK6B,QA3CpBxB,EAAAC,UAAAa,cAAA,WAWA,OADAnB,KAAAqB,aAAKrB,KAAL8B,SAAAC,KAAA/B,KAAAkB,OAAAc,SACAhC,KAAAqB,aAAAC,KAAAtB,KAAAkB,6CCzCA,iEAAAlB,KAAAiC,aAAAX,KAAAtB,KAAA2B,aAaAtB,EAAA6B,mJAaA,SAAAC,EAAAC,EAAAC,GACgBrC,KAAhBmC,UAAgBA,EACAnC,KAAhBoC,QAAAA,EAJApC,KAAAqC,IAAAA,qHAaAvC,OAAAM,eAA0BkC,EAAShC,UAAnC,iBAKAS,IAAA,SAAAwB,GACAA,uBACA9B,YAAA,EACQC,cAAR,4GAMAV,KAAAwC,QAAAxC,KAAA8B,SAAAC,KAAAQ,GAAAP,YAYAM,EAAiBhC,UAAjBmC,UAAA,WAAA,GAAAzC,KAAuBwC,QAAS,CAChC,IAAAE,EAA+C1C,KAA/CwC,QAA4DlB,KAA5DtB,KAAsE2C,UACtED,GAAA1C,KAAA4C,cAAAF,2DA5CAA,EAAAG,YAAA,SAAAC,8KAjBAC,EAAAC,KAAAC,QAIA,GAAA,MAAAH,EAAAI,6DAeA,CAOAC,EAAAC,EAAAC,eAAA1C,IAAA2C,SAAAR,EAAAT,IAAA,iDAkDAY,EAAA,IAAAM,EAAAT,EAAAI,aAAA,EAAAI,SAAAR,EAAAT,IAAA,wBAEAC,EAAAkB,aACAC,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,yBAGAtB,EAAAuB,eAAA,WAAA,mGCvFAlB,WAAAc,KAAAK,EAAAA,wCAGA,IAAAP,EAAA,kBAMA,SAAAQ,EAAAZ,EAAAa,GACAhE,KAAC+D,OAADA,4BAPA"
}
